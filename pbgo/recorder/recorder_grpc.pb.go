// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: recorder/recorder.proto

package recorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecorderService_RecordShiftStarted_FullMethodName   = "/recorder.RecorderService/RecordShiftStarted"
	RecorderService_RecordShiftEnded_FullMethodName     = "/recorder.RecorderService/RecordShiftEnded"
	RecorderService_RecordShuffleStarted_FullMethodName = "/recorder.RecorderService/RecordShuffleStarted"
	RecorderService_RecordShuffleDone_FullMethodName    = "/recorder.RecorderService/RecordShuffleDone"
	RecorderService_RecordShuffleEnd_FullMethodName     = "/recorder.RecorderService/RecordShuffleEnd"
	RecorderService_RecordRoundStart_FullMethodName     = "/recorder.RecorderService/RecordRoundStart"
	RecorderService_RecordRoundSteps_FullMethodName     = "/recorder.RecorderService/RecordRoundSteps"
	RecorderService_RecordRoundResults_FullMethodName   = "/recorder.RecorderService/RecordRoundResults"
	RecorderService_RecordRoundCancel_FullMethodName    = "/recorder.RecorderService/RecordRoundCancel"
	RecorderService_RecordRoundFinish_FullMethodName    = "/recorder.RecorderService/RecordRoundFinish"
	RecorderService_RecordRoadmap_FullMethodName        = "/recorder.RecorderService/RecordRoadmap"
	RecorderService_RecordRoadmapCancel_FullMethodName  = "/recorder.RecorderService/RecordRoadmapCancel"
	RecorderService_RecordRoundVideo_FullMethodName     = "/recorder.RecorderService/RecordRoundVideo"
)

// RecorderServiceClient is the client API for RecorderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderServiceClient interface {
	// 建立新排班
	RecordShiftStarted(ctx context.Context, in *RecordShiftStartedRequest, opts ...grpc.CallOption) (*RecordIDResponse, error)
	// 排班結束
	RecordShiftEnded(ctx context.Context, in *RecordShiftEndedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 開始更換牌組
	RecordShuffleStarted(ctx context.Context, in *RecordShuffleStartedRequest, opts ...grpc.CallOption) (*RecordIDResponse, error)
	// 更換牌組完畢
	RecordShuffleDone(ctx context.Context, in *RecordShuffleDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 使用牌組完畢
	RecordShuffleEnd(ctx context.Context, in *RecordShuffleDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 開啟新局
	RecordRoundStart(ctx context.Context, in *RecordRoundStartRequest, opts ...grpc.CallOption) (*RecordIDResponse, error)
	// 記錄步驟
	RecordRoundSteps(ctx context.Context, in *RecordRoundStepsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 紀錄結果
	RecordRoundResults(ctx context.Context, in *RecordRoundResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 此局作廢
	RecordRoundCancel(ctx context.Context, in *RecordRoundCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 結束此局
	RecordRoundFinish(ctx context.Context, in *RecordRoundFinishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 紀錄路紙
	RecordRoadmap(ctx context.Context, in *RecordRoadmapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 此路紙作廢
	RecordRoadmapCancel(ctx context.Context, in *RecordRoadmapCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 紀錄回放
	RecordRoundVideo(ctx context.Context, in *RecordRoundMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type recorderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderServiceClient(cc grpc.ClientConnInterface) RecorderServiceClient {
	return &recorderServiceClient{cc}
}

func (c *recorderServiceClient) RecordShiftStarted(ctx context.Context, in *RecordShiftStartedRequest, opts ...grpc.CallOption) (*RecordIDResponse, error) {
	out := new(RecordIDResponse)
	err := c.cc.Invoke(ctx, RecorderService_RecordShiftStarted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordShiftEnded(ctx context.Context, in *RecordShiftEndedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordShiftEnded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordShuffleStarted(ctx context.Context, in *RecordShuffleStartedRequest, opts ...grpc.CallOption) (*RecordIDResponse, error) {
	out := new(RecordIDResponse)
	err := c.cc.Invoke(ctx, RecorderService_RecordShuffleStarted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordShuffleDone(ctx context.Context, in *RecordShuffleDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordShuffleDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordShuffleEnd(ctx context.Context, in *RecordShuffleDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordShuffleEnd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundStart(ctx context.Context, in *RecordRoundStartRequest, opts ...grpc.CallOption) (*RecordIDResponse, error) {
	out := new(RecordIDResponse)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundSteps(ctx context.Context, in *RecordRoundStepsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundResults(ctx context.Context, in *RecordRoundResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundCancel(ctx context.Context, in *RecordRoundCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundFinish(ctx context.Context, in *RecordRoundFinishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoadmap(ctx context.Context, in *RecordRoadmapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoadmap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoadmapCancel(ctx context.Context, in *RecordRoadmapCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoadmapCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderServiceClient) RecordRoundVideo(ctx context.Context, in *RecordRoundMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecorderService_RecordRoundVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServiceServer is the server API for RecorderService service.
// All implementations must embed UnimplementedRecorderServiceServer
// for forward compatibility
type RecorderServiceServer interface {
	// 建立新排班
	RecordShiftStarted(context.Context, *RecordShiftStartedRequest) (*RecordIDResponse, error)
	// 排班結束
	RecordShiftEnded(context.Context, *RecordShiftEndedRequest) (*emptypb.Empty, error)
	// 開始更換牌組
	RecordShuffleStarted(context.Context, *RecordShuffleStartedRequest) (*RecordIDResponse, error)
	// 更換牌組完畢
	RecordShuffleDone(context.Context, *RecordShuffleDoneRequest) (*emptypb.Empty, error)
	// 使用牌組完畢
	RecordShuffleEnd(context.Context, *RecordShuffleDoneRequest) (*emptypb.Empty, error)
	// 開啟新局
	RecordRoundStart(context.Context, *RecordRoundStartRequest) (*RecordIDResponse, error)
	// 記錄步驟
	RecordRoundSteps(context.Context, *RecordRoundStepsRequest) (*emptypb.Empty, error)
	// 紀錄結果
	RecordRoundResults(context.Context, *RecordRoundResultsRequest) (*emptypb.Empty, error)
	// 此局作廢
	RecordRoundCancel(context.Context, *RecordRoundCancelRequest) (*emptypb.Empty, error)
	// 結束此局
	RecordRoundFinish(context.Context, *RecordRoundFinishRequest) (*emptypb.Empty, error)
	// 紀錄路紙
	RecordRoadmap(context.Context, *RecordRoadmapRequest) (*emptypb.Empty, error)
	// 此路紙作廢
	RecordRoadmapCancel(context.Context, *RecordRoadmapCancelRequest) (*emptypb.Empty, error)
	// 紀錄回放
	RecordRoundVideo(context.Context, *RecordRoundMediaRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRecorderServiceServer()
}

// UnimplementedRecorderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderServiceServer struct {
}

func (UnimplementedRecorderServiceServer) RecordShiftStarted(context.Context, *RecordShiftStartedRequest) (*RecordIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShiftStarted not implemented")
}
func (UnimplementedRecorderServiceServer) RecordShiftEnded(context.Context, *RecordShiftEndedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShiftEnded not implemented")
}
func (UnimplementedRecorderServiceServer) RecordShuffleStarted(context.Context, *RecordShuffleStartedRequest) (*RecordIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShuffleStarted not implemented")
}
func (UnimplementedRecorderServiceServer) RecordShuffleDone(context.Context, *RecordShuffleDoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShuffleDone not implemented")
}
func (UnimplementedRecorderServiceServer) RecordShuffleEnd(context.Context, *RecordShuffleDoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShuffleEnd not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundStart(context.Context, *RecordRoundStartRequest) (*RecordIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundStart not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundSteps(context.Context, *RecordRoundStepsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundSteps not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundResults(context.Context, *RecordRoundResultsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundResults not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundCancel(context.Context, *RecordRoundCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundCancel not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundFinish(context.Context, *RecordRoundFinishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundFinish not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoadmap(context.Context, *RecordRoadmapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoadmap not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoadmapCancel(context.Context, *RecordRoadmapCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoadmapCancel not implemented")
}
func (UnimplementedRecorderServiceServer) RecordRoundVideo(context.Context, *RecordRoundMediaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordRoundVideo not implemented")
}
func (UnimplementedRecorderServiceServer) mustEmbedUnimplementedRecorderServiceServer() {}

// UnsafeRecorderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecorderServiceServer will
// result in compilation errors.
type UnsafeRecorderServiceServer interface {
	mustEmbedUnimplementedRecorderServiceServer()
}

func RegisterRecorderServiceServer(s grpc.ServiceRegistrar, srv RecorderServiceServer) {
	s.RegisterService(&RecorderService_ServiceDesc, srv)
}

func _RecorderService_RecordShiftStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShiftStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordShiftStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordShiftStarted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordShiftStarted(ctx, req.(*RecordShiftStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordShiftEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShiftEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordShiftEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordShiftEnded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordShiftEnded(ctx, req.(*RecordShiftEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordShuffleStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShuffleStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordShuffleStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordShuffleStarted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordShuffleStarted(ctx, req.(*RecordShuffleStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordShuffleDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShuffleDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordShuffleDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordShuffleDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordShuffleDone(ctx, req.(*RecordShuffleDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordShuffleEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShuffleDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordShuffleEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordShuffleEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordShuffleEnd(ctx, req.(*RecordShuffleDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundStart(ctx, req.(*RecordRoundStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundSteps(ctx, req.(*RecordRoundStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundResults(ctx, req.(*RecordRoundResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundCancel(ctx, req.(*RecordRoundCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundFinish(ctx, req.(*RecordRoundFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoadmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoadmap(ctx, req.(*RecordRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoadmapCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoadmapCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoadmapCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoadmapCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoadmapCancel(ctx, req.(*RecordRoadmapCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderService_RecordRoundVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRoundMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServiceServer).RecordRoundVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderService_RecordRoundVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServiceServer).RecordRoundVideo(ctx, req.(*RecordRoundMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecorderService_ServiceDesc is the grpc.ServiceDesc for RecorderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecorderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recorder.RecorderService",
	HandlerType: (*RecorderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordShiftStarted",
			Handler:    _RecorderService_RecordShiftStarted_Handler,
		},
		{
			MethodName: "RecordShiftEnded",
			Handler:    _RecorderService_RecordShiftEnded_Handler,
		},
		{
			MethodName: "RecordShuffleStarted",
			Handler:    _RecorderService_RecordShuffleStarted_Handler,
		},
		{
			MethodName: "RecordShuffleDone",
			Handler:    _RecorderService_RecordShuffleDone_Handler,
		},
		{
			MethodName: "RecordShuffleEnd",
			Handler:    _RecorderService_RecordShuffleEnd_Handler,
		},
		{
			MethodName: "RecordRoundStart",
			Handler:    _RecorderService_RecordRoundStart_Handler,
		},
		{
			MethodName: "RecordRoundSteps",
			Handler:    _RecorderService_RecordRoundSteps_Handler,
		},
		{
			MethodName: "RecordRoundResults",
			Handler:    _RecorderService_RecordRoundResults_Handler,
		},
		{
			MethodName: "RecordRoundCancel",
			Handler:    _RecorderService_RecordRoundCancel_Handler,
		},
		{
			MethodName: "RecordRoundFinish",
			Handler:    _RecorderService_RecordRoundFinish_Handler,
		},
		{
			MethodName: "RecordRoadmap",
			Handler:    _RecorderService_RecordRoadmap_Handler,
		},
		{
			MethodName: "RecordRoadmapCancel",
			Handler:    _RecorderService_RecordRoadmapCancel_Handler,
		},
		{
			MethodName: "RecordRoundVideo",
			Handler:    _RecorderService_RecordRoundVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder/recorder.proto",
}
