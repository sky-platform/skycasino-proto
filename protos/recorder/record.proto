syntax = "proto3";
package recorder;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "tagger/tagger.proto";

// 卡牌，代表在此局中使用的各類物品
message Card {

  // 卡牌ID：牌唯一碼，同ID表示同一張實體牌。不使用此欄位填0。
  string id = 1;
  // 卡牌代碼
  string code = 2;
  // 順序
  int64 index = 3;
  // 可見
  bool visible = 4;
  // 橫放、直放...
  optional int64 status = 5 [(tagger.tags) = "bson:\"status,omitempty\""];

  // 明文
  optional string plain_text = 8 [(tagger.tags) = "bson:\"plainText,omitempty\""];
  // 簽章
  optional string signature = 9 [(tagger.tags) = "bson:\"signature,omitempty\""];
  // 簽章方法
  optional string sign_algorithm = 10 [(tagger.tags) = "bson:\"signAlgorithm,omitempty\""];

}

// 卡牌列表
message CardList {

  string card_type = 2;
  // 列表
  repeated Card list = 3;

}

// 動作類型
enum StepActionType {

  // 未指定
  STEP_ACTION_TYPE_UNSPECIFIED = 0;
  // 派發資源
  ADD = 1;
  // 設定指定資源
  SET = 2;
  // 改寫全部資源;
  SETALL = 3;
  // 將資源從場上移除
  REMOVE = 4;
  // 讀取卡牌資料
  READ = 5;
  // 讀卡但不可見
  READ_UNVISIBLE = 6;
  // 移轉資源
  TRANSFER = 7;
  // 卡片正反面
  VISIBLE = 8;
  // 卡牌狀態改變
  STATUS = 9;
  // 此步驟不須修改資源
  NONE = 10;

}

// 執行動作：對某些資源進行增、刪、移轉
message StepAction {

  // 行為說明代碼：StepActionCode
  int32 code = 2;
  // 動作類型
  StepActionType type = 3;
  // 資源擁有座位。
  optional int32 source_seat = 4 [(tagger.tags) = "bson:\"sourceSeat,omitempty\""];
  // 資源轉移目標座位。
  optional int32 target_seat = 5 [(tagger.tags) = "bson:\"targetSeat,omitempty\""];
  // 目標卡牌資源
  // key: ResourceTypeCode, value: 卡牌陣列
  map<int32, CardList> cards = 6 [(tagger.tags) = "bson:\"cards,omitempty\""];
  // 目標分數資源
  // key: ResourceTypeCode, value: 分數值。
  map<int32, int64> scores = 7 [(tagger.tags) = "bson:\"scores,omitempty\""];

  // （可選）附加資料
  google.protobuf.Any data = 8 [(tagger.tags) = "bson:\"data,omitempty\""];

}

// 遊戲步驟
message Step {

  // 步驟代碼：StepCode
  int32 code = 2;
  // 玩家、執行者：SeatCode
  optional int32 seat = 3 [(tagger.tags) = "bson:\"seat,omitempty\""];
  // 時間戳
  google.protobuf.Timestamp timestamp = 5;
  // 執行動作
  repeated StepAction actions = 6 [(tagger.tags) = "bson:\"action,omitempty\""];
  // 執行錯誤
  optional string error = 8 [(tagger.tags) = "bson:\"error,omitempty\""];
  // 取消
  optional bool cancel = 9 [(tagger.tags) = "bson:\"cancel,omitempty\""];
  // 分配毫秒數
  optional int64 duration = 10 [(tagger.tags) = "bson:\"duration,omitempty\""];
  
}

// 座位
message Seat {

  // 座位功能代碼：SeatCode
  int32 code = 2;
  // 各類手牌
  // key: ResourceTypeCode, value: 卡牌陣列
  map<int32, CardList> cards = 3 [(tagger.tags) = "bson:\"cards,omitempty\""];
  // 各類分數
  // key: ResourceTypeCode, value: 分數值。
  map<int32, int64> scores = 4 [(tagger.tags) = "bson:\"scores,omitempty\""];

}

// 記錄各座位狀態
message Result {

  // 判讀類型代碼：ResultRecordTypeCode
  int32 code = 2;
  // 紀錄者座位代碼
  optional int32 by_seat = 3 [(tagger.tags) = "bson:\"bySeat,omitempty\""];
  // 時間戳
  google.protobuf.Timestamp timestamp = 4;
  // 座位組
  // key: SeatCode, value: Seat
  map<int32, Seat> seats = 5;

}

// 多媒體
message URLMedia {

  // 代碼
  string code = 1;

  // 類型：hls, flv...
  string mime = 2;

  // url
  string url = 3;
  
}

// 紀錄
message RoundRecord {

  // 紀錄ID
  bytes id = 1 [(tagger.tags) = "bson:\"_id,omitempty\""];
  // 遊戲類型
  string game_type = 2;
  // 遊戲子類型
  string game_subtype = 3;
  // 遊戲版本
  string game_version = 4;
  // 遊戲代碼
  string game_code = 5;
  // 桌代碼
  string table_code = 6;
  // 排班代碼
  string shift_code = 7;
  // 此排班局數
  string shift_round = 8;
  // 局代碼
  string round_code = 9;
  // 使用洗牌代碼
  string shuffle_code = 10;
  // 使用此洗牌第幾局，從1開始計算
  int64 shuffle_round = 11;
  // 開始時間
  google.protobuf.Timestamp ts_start = 12;
  // 座位組
  // key: SeatCode, value: Seat
  map<int32, Seat> seats = 13 [(tagger.tags) = "bson:\"seats,omitempty\""];
  // 玩家入座
  // key: SeatCode, value: 玩家code。
  map<int32, string> players = 14 [(tagger.tags) = "bson:\"players,omitempty\""];
  // 標籤
  map<string, string> tags = 15 [(tagger.tags) = "bson:\"tags,omitempty\"" ];

  // 歷程
  repeated Step process = 16 [(tagger.tags) = "bson:\"process,omitempty\""];
  // 判讀
  repeated Result results = 17 [(tagger.tags) = "bson:\"results,omitempty\""];

  // 結束
  bool is_end = 18;
  // 結束時間
  google.protobuf.Timestamp ts_end = 19 [(tagger.tags) = "bson:\"tsEnd,omitempty\"" ];

  // 取消
  optional bool cancel = 20 [(tagger.tags) = "bson:\"cancel,omitempty\""];
  // 取消代碼：CancelReasonCode
  optional string cancel_code = 21 [(tagger.tags) = "bson:\"cancelCode,omitempty\""];
  // 取消備註
  optional string cancel_message = 22 [(tagger.tags) = "bson:\"cancelMessage,omitempty\""];

  // 附加媒體
  map<string, URLMedia> mideas = 24;

}

message Deck {

  // 卡牌
  CardList cards = 1;
  // 起始位置（削牌後）
  int64 start_index = 2;
  // 切牌位置
  optional int64 cut_index = 3 [(tagger.tags) = "bson:\"cutIndex,omitempty\""];
  // 目前位置
  int64 index = 4;

}

// 洗牌紀錄
message ShuffleRecord {

  // 紀錄ID
  bytes id = 1  [(tagger.tags) = "bson:\"_id,omitempty\"" ];
  // 遊戲類型
  string game_type = 2;
  // 遊戲子類型
  string game_subtype = 3;
  // 遊戲版本
  string game_version = 4;
  // 桌代碼
  string table_code = 5;
  // 使用洗牌ID
  string shuffle_code = 6;
  // 開始洗牌時間
  google.protobuf.Timestamp ts_start = 7;
  // 結束洗牌時間
  google.protobuf.Timestamp ts_end = 8 [(tagger.tags) = "bson:\"tsEnd,omitempty\""];
  // cardList
  map<int32, Deck> decks = 11 [(tagger.tags) = "bson:\"decks,omitempty\""];
  // 已經完成
  bool is_end = 12;

}

message BABead {
  repeated string bankerCards = 1;
  repeated string playerCards = 2;

  int32 bankerPoint = 11;
  int32 playerPoint = 12;
  bool bankerWin = 13;
  bool playerWin = 14;
  bool hasBankerPair = 15;
  bool hasPlayerPair = 16;
  string winType = 17;

  int32 hightLight = 21;
  string multiplier = 22;

  map<string, int32> luckys = 31;
  map<string, int32> statistics = 32;
}

message DTBead {
  repeated string bankerCards = 1;
  repeated string playerCards = 2;

  string bankerBarCode = 11;
  string playerBarCode = 12;
  int32 bankerPoint = 13;
  int32 playerPoint = 14;
  bool bankerWin = 15;
  bool playerWin = 16;
  string winType = 17;

  map<string, int32> statistics = 32;
}

message DIBead {
  repeated int32 dice = 1;

  int32 total = 11;
  int32 odd = 12;
  int32 size = 13;
  int32 tie = 14;
  int32 odds = 15;

  map<string, int32> luckys = 31;
  map<string, int32> statistics = 32;
}

message LOBead {
  repeated int32 balls = 1;

  map<string, int32> statistics = 32;
}

message LWBead {
  int32 direction = 1;
  string value = 2;

  map<string, int32> statistics = 32;
}

message OXBead {
  repeated string bankerCards = 1;
  repeated string playerXCards = 2;
  repeated string playerYCards = 3;
  repeated string playerZCards = 4;
  string firstCard = 5;

  int32 bankerType = 11;
  int32 playerXType = 12;
  int32 playerYType = 13;
  int32 playerZType = 14;
  bool playerXWin = 15;
  bool playerYWin = 16;
  bool playerZWin = 17;
  string winType = 18;

  map<string, int32> statistics = 32;
}

message RCBead {
  repeated int32 balls = 1;

  map<string, int32> statistics = 32;
}

message ROBead {
  string raw = 1;
  int32 value = 2;
  int32 direction = 3;

  map<string, int32> luckys = 31;
  map<string, int32> statistics = 32;
}

message ZJHBead {
  repeated string bankerCards = 1;
  repeated string playerCards = 2;
  string bankerBarCode = 11;
  string playerBarCode = 12;
  string bankerStyle = 13;
  string playerStyle = 14;
  string bankerWinPoint = 15;
  string playerWinPoint = 16;
  string winType = 17;
  string winStyle = 18;

  map<string, int32> statistics = 32;
}

message FANBead {
  int32 count = 1;
  int32 fan = 2;
  int32 odd = 3;
  string winType = 4;

  map<string, int32> statistics = 32;
}

message RoadmapBead {
  string gameRoundID = 1;
  string shoeID = 2;
  uint32 shoe = 3;
  uint32 round = 4;
  string result = 5;
  map<string, URLMedia> medias = 8;

  BABead baBead = 11;
  DIBead diBead = 12;
  DTBead dtBead = 13;
  LOBead loBead = 14;
  LWBead lwBead = 15;
  OXBead oxBead = 16;
  RCBead rcBead = 17;
  ROBead roBead = 18;
  ZJHBead zjhBead = 19;
  FANBead fanBead = 20;
}

message RoadMap {
  repeated RoadmapBead beads = 1;
  int32 columnLength = 2;
}

// 排班
message ShiftRecord {

  // 紀錄ID
  bytes id = 1  [(tagger.tags) = "bson:\"_id,omitempty\"" ];
  // 遊戲類型
  string game_type = 2;
  // 遊戲子類型
  string game_subtype = 3;
  // 遊戲版本
  string game_version = 4;
  // 遊戲代碼
  string game_code = 5;
  // 桌代碼
  string table_code = 6;
  // 班代碼
  string shift_code = 7;
  // 標籤
  map<string, string> tags = 8 [(tagger.tags) = "bson:\"tags,omitempty\"" ];
  // 開始時間
  google.protobuf.Timestamp ts_start = 9;

  // 洗牌
  repeated string shuffle_codes = 10;
  // 執行遊戲局
  repeated string round_codes = 11;

  // 結束
  bool is_end = 12;
  // 結束時間
  google.protobuf.Timestamp ts_end = 13 [(tagger.tags) = "bson:\"tsEnd,omitempty\"" ];

  // TODO: 路紙
  string tableID = 14;
  string shoeID = 15;
  int32 totalCount = 16;
  int32 shoeRoundNum = 17;
  // Statistic Map
  map <string, int32> statistic = 20;
  map <string, int32> comboStatistic = 21;
  map <int32, int32> resultCount = 22;
  map <string, int32> loShow = 23;
  map <string, int32> loNoShow = 24;
  map <string, int32> rcShow = 25;
  map <string, int32> rcNoShow = 26;

  RoadMap roadmap = 31;
}
