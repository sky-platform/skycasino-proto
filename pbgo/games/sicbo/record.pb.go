// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: games/sicbo/record.proto

package sicbo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceType int32

const (
	// 未指定
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// 牌靴
	ResourceType_SHOE ResourceType = 1
	// 碗公
	ResourceType_BOWL ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "SHOE",
		2: "BOWL",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"SHOE":                      1,
		"BOWL":                      2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_sicbo_record_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_games_sicbo_record_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{0}
}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
type Step int32

const (
	// 未指定
	Step_STEP_UNSPECIFIED Step = 0
	// 本局開始
	Step_ROUND_START Step = 1
	// 本局完成
	Step_ROUND_FINISHED Step = 2
	// 本局取消
	Step_ROUND_CANCELED Step = 3
	// 開放下注
	Step_OPEN_FOR_BETTING Step = 4
	// 停止下注
	Step_CLOSE_THE_BETTING Step = 5
	// 擲骰
	Step_THROW_DICE Step = 8
	// PITBOSS 修改骰點
	Step_PITBOSS_MODIFY_BOWL Step = 16
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0:  "STEP_UNSPECIFIED",
		1:  "ROUND_START",
		2:  "ROUND_FINISHED",
		3:  "ROUND_CANCELED",
		4:  "OPEN_FOR_BETTING",
		5:  "CLOSE_THE_BETTING",
		8:  "THROW_DICE",
		16: "PITBOSS_MODIFY_BOWL",
	}
	Step_value = map[string]int32{
		"STEP_UNSPECIFIED":    0,
		"ROUND_START":         1,
		"ROUND_FINISHED":      2,
		"ROUND_CANCELED":      3,
		"OPEN_FOR_BETTING":    4,
		"CLOSE_THE_BETTING":   5,
		"THROW_DICE":          8,
		"PITBOSS_MODIFY_BOWL": 16,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_games_sicbo_record_proto_enumTypes[1].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_games_sicbo_record_proto_enumTypes[1]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{1}
}

// 座位功能代碼
type Seat int32

const (
	// 未指定
	Seat_SEAT_UNSPECIFIED Seat = 0
	// Dealer
	Seat_DEALER Seat = 1
	// Pitboss
	Seat_PITBOSS Seat = 9
)

// Enum value maps for Seat.
var (
	Seat_name = map[int32]string{
		0: "SEAT_UNSPECIFIED",
		1: "DEALER",
		9: "PITBOSS",
	}
	Seat_value = map[string]int32{
		"SEAT_UNSPECIFIED": 0,
		"DEALER":           1,
		"PITBOSS":          9,
	}
)

func (x Seat) Enum() *Seat {
	p := new(Seat)
	*p = x
	return p
}

func (x Seat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Seat) Descriptor() protoreflect.EnumDescriptor {
	return file_games_sicbo_record_proto_enumTypes[2].Descriptor()
}

func (Seat) Type() protoreflect.EnumType {
	return &file_games_sicbo_record_proto_enumTypes[2]
}

func (x Seat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Seat.Descriptor instead.
func (Seat) EnumDescriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{2}
}

// 結果紀錄類型代碼
type ResultRecordType int32

const (
	// 未指定
	ResultRecordType_RESULT_RECORD_TYPE_UNSPECIFIED ResultRecordType = 0
	// 遊戲局結束
	ResultRecordType_ROUND_FINISH ResultRecordType = 1
	// Pitboss 修正
	ResultRecordType_PITBOSS_MODIFY_RESULT ResultRecordType = 2
)

// Enum value maps for ResultRecordType.
var (
	ResultRecordType_name = map[int32]string{
		0: "RESULT_RECORD_TYPE_UNSPECIFIED",
		1: "ROUND_FINISH",
		2: "PITBOSS_MODIFY_RESULT",
	}
	ResultRecordType_value = map[string]int32{
		"RESULT_RECORD_TYPE_UNSPECIFIED": 0,
		"ROUND_FINISH":                   1,
		"PITBOSS_MODIFY_RESULT":          2,
	}
)

func (x ResultRecordType) Enum() *ResultRecordType {
	p := new(ResultRecordType)
	*p = x
	return p
}

func (x ResultRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_sicbo_record_proto_enumTypes[3].Descriptor()
}

func (ResultRecordType) Type() protoreflect.EnumType {
	return &file_games_sicbo_record_proto_enumTypes[3]
}

func (x ResultRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultRecordType.Descriptor instead.
func (ResultRecordType) EnumDescriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{3}
}

// *
// The state of the game flow
type GameState int32

const (
	GameState_STATE_IDLE          GameState = 0  // Idle
	GameState_STATE_START         GameState = 1  // Game Starting
	GameState_STATE_COUNTER_START GameState = 2  // Counuter Started
	GameState_STATE_INPUT         GameState = 3  // Wait for input
	GameState_STATE_END           GameState = 7  // Game Ended
	GameState_STATE_CONFIRM       GameState = 8  // Game Ended
	GameState_STATE_SHUFFLE       GameState = 30 // Shuffle cards
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "STATE_IDLE",
		1:  "STATE_START",
		2:  "STATE_COUNTER_START",
		3:  "STATE_INPUT",
		7:  "STATE_END",
		8:  "STATE_CONFIRM",
		30: "STATE_SHUFFLE",
	}
	GameState_value = map[string]int32{
		"STATE_IDLE":          0,
		"STATE_START":         1,
		"STATE_COUNTER_START": 2,
		"STATE_INPUT":         3,
		"STATE_END":           7,
		"STATE_CONFIRM":       8,
		"STATE_SHUFFLE":       30,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_games_sicbo_record_proto_enumTypes[4].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_games_sicbo_record_proto_enumTypes[4]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{4}
}

// *
// The status fo the current game.
type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID     string           `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`                     // Unique tableid
	GameRoundID   string           `protobuf:"bytes,2,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`                 // Unique session for the game
	TableID       string           `protobuf:"bytes,3,opt,name=tableID,proto3" json:"tableID,omitempty"`                         // Unique tableid
	State         GameState        `protobuf:"varint,4,opt,name=state,proto3,enum=games.sicbo.GameState" json:"state,omitempty"` // State of the game
	StartTime     int64            `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`                    // Time when game start
	ShoeID        string           `protobuf:"bytes,6,opt,name=shoeID,proto3" json:"shoeID,omitempty"`                           // Shoe ID
	Shoe          int32            `protobuf:"varint,7,opt,name=shoe,proto3" json:"shoe,omitempty"`
	Round         int32            `protobuf:"varint,8,opt,name=round,proto3" json:"round,omitempty"`
	Dice1         int32            `protobuf:"varint,10,opt,name=dice1,proto3" json:"dice1,omitempty"`                                                                                         // Value of the dice 1
	Dice2         int32            `protobuf:"varint,11,opt,name=dice2,proto3" json:"dice2,omitempty"`                                                                                         // Value of the dice 2
	Dice3         int32            `protobuf:"varint,12,opt,name=dice3,proto3" json:"dice3,omitempty"`                                                                                         // Value of the dice 3
	Total         int32            `protobuf:"varint,13,opt,name=total,proto3" json:"total,omitempty"`                                                                                         // Total dice1+dice2+dice3
	Odd           int32            `protobuf:"varint,14,opt,name=odd,proto3" json:"odd,omitempty"`                                                                                             // Odd/Even=1/2
	Size          int32            `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`                                                                                           // Small/Big=1/2
	Countdown     int32            `protobuf:"varint,16,opt,name=countdown,proto3" json:"countdown,omitempty"`                                                                                 // Coundown value
	Tie           int32            `protobuf:"varint,17,opt,name=tie,proto3" json:"tie,omitempty"`                                                                                             // dice1=dice2=dice3?1:0
	Dealstarttime int64            `protobuf:"varint,18,opt,name=dealstarttime,proto3" json:"dealstarttime,omitempty"`                                                                         // Deal start time for blockchain
	Dealcountdown int64            `protobuf:"varint,19,opt,name=dealcountdown,proto3" json:"dealcountdown,omitempty"`                                                                         // Deal count down for  blockchain
	Maskedcardssn string           `protobuf:"bytes,20,opt,name=maskedcardssn,proto3" json:"maskedcardssn,omitempty"`                                                                          // maskedcardssn for blockchain
	Lucky         map[string]int32 `protobuf:"bytes,40,rep,name=lucky,proto3" json:"lucky,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Lucky Number and payout ratio
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_sicbo_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_games_sicbo_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_games_sicbo_record_proto_rawDescGZIP(), []int{0}
}

func (x *GameStatus) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *GameStatus) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *GameStatus) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *GameStatus) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_STATE_IDLE
}

func (x *GameStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameStatus) GetShoeID() string {
	if x != nil {
		return x.ShoeID
	}
	return ""
}

func (x *GameStatus) GetShoe() int32 {
	if x != nil {
		return x.Shoe
	}
	return 0
}

func (x *GameStatus) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GameStatus) GetDice1() int32 {
	if x != nil {
		return x.Dice1
	}
	return 0
}

func (x *GameStatus) GetDice2() int32 {
	if x != nil {
		return x.Dice2
	}
	return 0
}

func (x *GameStatus) GetDice3() int32 {
	if x != nil {
		return x.Dice3
	}
	return 0
}

func (x *GameStatus) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GameStatus) GetOdd() int32 {
	if x != nil {
		return x.Odd
	}
	return 0
}

func (x *GameStatus) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GameStatus) GetCountdown() int32 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *GameStatus) GetTie() int32 {
	if x != nil {
		return x.Tie
	}
	return 0
}

func (x *GameStatus) GetDealstarttime() int64 {
	if x != nil {
		return x.Dealstarttime
	}
	return 0
}

func (x *GameStatus) GetDealcountdown() int64 {
	if x != nil {
		return x.Dealcountdown
	}
	return 0
}

func (x *GameStatus) GetMaskedcardssn() string {
	if x != nil {
		return x.Maskedcardssn
	}
	return ""
}

func (x *GameStatus) GetLucky() map[string]int32 {
	if x != nil {
		return x.Lucky
	}
	return nil
}

var File_games_sicbo_record_proto protoreflect.FileDescriptor

var file_games_sicbo_record_proto_rawDesc = []byte{
	0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x69, 0x63, 0x62, 0x6f, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x2e, 0x73, 0x69, 0x63, 0x62, 0x6f, 0x22, 0x88, 0x05, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x73, 0x69, 0x63, 0x62, 0x6f, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x69, 0x63, 0x65, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x69, 0x63, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x63, 0x65, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x69, 0x63, 0x65, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69,
	0x63, 0x65, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x69, 0x63, 0x65, 0x33,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x73, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x73, 0x6e, 0x12, 0x38,
	0x0a, 0x05, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x73, 0x69, 0x63, 0x62, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x4f, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x57, 0x4c, 0x10, 0x02, 0x2a, 0xab, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x48, 0x45,
	0x5f, 0x42, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48,
	0x52, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x49,
	0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x4f, 0x57,
	0x4c, 0x10, 0x10, 0x2a, 0x35, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x09, 0x2a, 0x63, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a,
	0x8b, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x1e, 0x42, 0xa5, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x73, 0x69, 0x63, 0x62,
	0x6f, 0x42, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73,
	0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x69, 0x63, 0x62, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x53, 0x58,
	0xaa, 0x02, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0xca, 0x02,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5c, 0x53, 0x69, 0x63, 0x62, 0x6f, 0xe2, 0x02, 0x17, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x5c, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x3a, 0x3a,
	0x53, 0x69, 0x63, 0x62, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_games_sicbo_record_proto_rawDescOnce sync.Once
	file_games_sicbo_record_proto_rawDescData = file_games_sicbo_record_proto_rawDesc
)

func file_games_sicbo_record_proto_rawDescGZIP() []byte {
	file_games_sicbo_record_proto_rawDescOnce.Do(func() {
		file_games_sicbo_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_games_sicbo_record_proto_rawDescData)
	})
	return file_games_sicbo_record_proto_rawDescData
}

var file_games_sicbo_record_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_games_sicbo_record_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_games_sicbo_record_proto_goTypes = []interface{}{
	(ResourceType)(0),     // 0: games.sicbo.ResourceType
	(Step)(0),             // 1: games.sicbo.Step
	(Seat)(0),             // 2: games.sicbo.Seat
	(ResultRecordType)(0), // 3: games.sicbo.ResultRecordType
	(GameState)(0),        // 4: games.sicbo.GameState
	(*GameStatus)(nil),    // 5: games.sicbo.GameStatus
	nil,                   // 6: games.sicbo.GameStatus.LuckyEntry
}
var file_games_sicbo_record_proto_depIdxs = []int32{
	4, // 0: games.sicbo.GameStatus.state:type_name -> games.sicbo.GameState
	6, // 1: games.sicbo.GameStatus.lucky:type_name -> games.sicbo.GameStatus.LuckyEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_games_sicbo_record_proto_init() }
func file_games_sicbo_record_proto_init() {
	if File_games_sicbo_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_games_sicbo_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_games_sicbo_record_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_games_sicbo_record_proto_goTypes,
		DependencyIndexes: file_games_sicbo_record_proto_depIdxs,
		EnumInfos:         file_games_sicbo_record_proto_enumTypes,
		MessageInfos:      file_games_sicbo_record_proto_msgTypes,
	}.Build()
	File_games_sicbo_record_proto = out.File
	file_games_sicbo_record_proto_rawDesc = nil
	file_games_sicbo_record_proto_goTypes = nil
	file_games_sicbo_record_proto_depIdxs = nil
}
