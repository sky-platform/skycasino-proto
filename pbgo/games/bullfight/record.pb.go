// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: games/bullfight/record.proto

package bullfight

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceType int32

const (
	// 未指定
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// 牌靴
	ResourceType_SHOE ResourceType = 1
	// 例牌
	ResourceType_NORMAL ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "SHOE",
		2: "NORMAL",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"SHOE":                      1,
		"NORMAL":                    2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{0}
}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
type Step int32

const (
	// 未指定
	Step_STEP_UNSPECIFIED Step = 0
	// 本局開始
	Step_ROUND_START Step = 1
	// 本局完成
	Step_ROUND_FINISHED Step = 2
	// 本局取消
	Step_ROUND_CANCELED Step = 3
	// 派發起始位子牌(決定順位)
	Step_DEAL_FIRSTCARD Step = 4
	// 派發莊家例牌
	Step_DEAL_BANKER_1 Step = 5
	// 派發玩家1例牌
	Step_DEAL_PLAYER_1 Step = 6
	// 派發玩家2例牌
	Step_DEAL_PLAYER_2 Step = 7
	// 派發玩家3例牌
	Step_DEAL_PLAYER_3 Step = 8
	// 開放下注
	Step_OPEN_FOR_BETTING Step = 9
	// 停止下注
	Step_CLOSE_THE_BETTING Step = 10
	// 開莊家1例牌
	Step_SHOW_BANKER_1 Step = 12
	// 開玩家1例牌
	Step_SHOW_PLAYER_1 Step = 13
	// 開玩家2例牌
	Step_SHOW_PLAYER_2 Step = 14
	// 開玩家3例牌
	Step_SHOW_PLAYER_3 Step = 15
	// PITBOSS 修改派發例牌
	Step_PITBOSS_MODIFY_BANKER_1 Step = 24
	Step_PITBOSS_MODIFY_PLAYER_1 Step = 25
	Step_PITBOSS_MODIFY_PLAYER_2 Step = 26
	Step_PITBOSS_MODIFY_PLAYER_3 Step = 27
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0:  "STEP_UNSPECIFIED",
		1:  "ROUND_START",
		2:  "ROUND_FINISHED",
		3:  "ROUND_CANCELED",
		4:  "DEAL_FIRSTCARD",
		5:  "DEAL_BANKER_1",
		6:  "DEAL_PLAYER_1",
		7:  "DEAL_PLAYER_2",
		8:  "DEAL_PLAYER_3",
		9:  "OPEN_FOR_BETTING",
		10: "CLOSE_THE_BETTING",
		12: "SHOW_BANKER_1",
		13: "SHOW_PLAYER_1",
		14: "SHOW_PLAYER_2",
		15: "SHOW_PLAYER_3",
		24: "PITBOSS_MODIFY_BANKER_1",
		25: "PITBOSS_MODIFY_PLAYER_1",
		26: "PITBOSS_MODIFY_PLAYER_2",
		27: "PITBOSS_MODIFY_PLAYER_3",
	}
	Step_value = map[string]int32{
		"STEP_UNSPECIFIED":        0,
		"ROUND_START":             1,
		"ROUND_FINISHED":          2,
		"ROUND_CANCELED":          3,
		"DEAL_FIRSTCARD":          4,
		"DEAL_BANKER_1":           5,
		"DEAL_PLAYER_1":           6,
		"DEAL_PLAYER_2":           7,
		"DEAL_PLAYER_3":           8,
		"OPEN_FOR_BETTING":        9,
		"CLOSE_THE_BETTING":       10,
		"SHOW_BANKER_1":           12,
		"SHOW_PLAYER_1":           13,
		"SHOW_PLAYER_2":           14,
		"SHOW_PLAYER_3":           15,
		"PITBOSS_MODIFY_BANKER_1": 24,
		"PITBOSS_MODIFY_PLAYER_1": 25,
		"PITBOSS_MODIFY_PLAYER_2": 26,
		"PITBOSS_MODIFY_PLAYER_3": 27,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[1].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[1]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{1}
}

// 座位功能代碼
type Seat int32

const (
	// 未指定
	Seat_SEAT_UNSPECIFIED Seat = 0
	// 起始牌
	Seat_FISRTCARD Seat = 1
	// 莊家
	Seat_BANKER Seat = 2
	// 玩家1
	Seat_PLAYER1 Seat = 3
	// 玩家2
	Seat_PLAYER2 Seat = 4
	// 玩家3
	Seat_PLAYER3 Seat = 5
	// Dealer
	Seat_DEALER Seat = 6
	// Pitboss
	Seat_PITBOSS Seat = 9
)

// Enum value maps for Seat.
var (
	Seat_name = map[int32]string{
		0: "SEAT_UNSPECIFIED",
		1: "FISRTCARD",
		2: "BANKER",
		3: "PLAYER1",
		4: "PLAYER2",
		5: "PLAYER3",
		6: "DEALER",
		9: "PITBOSS",
	}
	Seat_value = map[string]int32{
		"SEAT_UNSPECIFIED": 0,
		"FISRTCARD":        1,
		"BANKER":           2,
		"PLAYER1":          3,
		"PLAYER2":          4,
		"PLAYER3":          5,
		"DEALER":           6,
		"PITBOSS":          9,
	}
)

func (x Seat) Enum() *Seat {
	p := new(Seat)
	*p = x
	return p
}

func (x Seat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Seat) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[2].Descriptor()
}

func (Seat) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[2]
}

func (x Seat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Seat.Descriptor instead.
func (Seat) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{2}
}

// 結果紀錄類型代碼
type ResultRecordType int32

const (
	// 未指定
	ResultRecordType_RESULT_RECORD_TYPE_UNSPECIFIED ResultRecordType = 0
	// 遊戲局結束
	ResultRecordType_ROUND_FINISH ResultRecordType = 1
	// Pitboss 修正
	ResultRecordType_PITBOSS_MODIFY_RESULT ResultRecordType = 2
)

// Enum value maps for ResultRecordType.
var (
	ResultRecordType_name = map[int32]string{
		0: "RESULT_RECORD_TYPE_UNSPECIFIED",
		1: "ROUND_FINISH",
		2: "PITBOSS_MODIFY_RESULT",
	}
	ResultRecordType_value = map[string]int32{
		"RESULT_RECORD_TYPE_UNSPECIFIED": 0,
		"ROUND_FINISH":                   1,
		"PITBOSS_MODIFY_RESULT":          2,
	}
)

func (x ResultRecordType) Enum() *ResultRecordType {
	p := new(ResultRecordType)
	*p = x
	return p
}

func (x ResultRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[3].Descriptor()
}

func (ResultRecordType) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[3]
}

func (x ResultRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultRecordType.Descriptor instead.
func (ResultRecordType) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{3}
}

// 取消原因
type CancelReason int32

const (
	// 未指定，沒有取消
	CancelReason_CANCEL_REASON_UNSPECIFIED CancelReason = 0
	// 取消說明原因
	CancelReason_NO_REASON CancelReason = 1
)

// Enum value maps for CancelReason.
var (
	CancelReason_name = map[int32]string{
		0: "CANCEL_REASON_UNSPECIFIED",
		1: "NO_REASON",
	}
	CancelReason_value = map[string]int32{
		"CANCEL_REASON_UNSPECIFIED": 0,
		"NO_REASON":                 1,
	}
)

func (x CancelReason) Enum() *CancelReason {
	p := new(CancelReason)
	*p = x
	return p
}

func (x CancelReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReason) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[4].Descriptor()
}

func (CancelReason) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[4]
}

func (x CancelReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReason.Descriptor instead.
func (CancelReason) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{4}
}

// *
// The state of the game flow
type GameState int32

const (
	GameState_STATE_IDLE          GameState = 0  // idle
	GameState_STATE_START         GameState = 1  // game starting
	GameState_STATE_COUNTER_START GameState = 2  // counter started
	GameState_STATE_COUNTER_END   GameState = 3  // scanned the first card ; wait for counter end
	GameState_STATE_REVEAL_FIRST  GameState = 4  // counter ended ; wait for the first position scan
	GameState_STATE_REVEAL_SECOND GameState = 5  // scanned the first position ; wait for the second position scan
	GameState_STATE_REVEAL_THIRD  GameState = 6  // scanned the second position ; wait for the third position scan
	GameState_STATE_REVEAL_FOURTH GameState = 7  // scanned the third position ; wait for the fourth position scan
	GameState_STATE_CONFIRM       GameState = 8  // scanned the fourth position ; wait for confirm
	GameState_STATE_END           GameState = 9  // game ended
	GameState_STATE_SHUFFLE       GameState = 30 // shuffle cards
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "STATE_IDLE",
		1:  "STATE_START",
		2:  "STATE_COUNTER_START",
		3:  "STATE_COUNTER_END",
		4:  "STATE_REVEAL_FIRST",
		5:  "STATE_REVEAL_SECOND",
		6:  "STATE_REVEAL_THIRD",
		7:  "STATE_REVEAL_FOURTH",
		8:  "STATE_CONFIRM",
		9:  "STATE_END",
		30: "STATE_SHUFFLE",
	}
	GameState_value = map[string]int32{
		"STATE_IDLE":          0,
		"STATE_START":         1,
		"STATE_COUNTER_START": 2,
		"STATE_COUNTER_END":   3,
		"STATE_REVEAL_FIRST":  4,
		"STATE_REVEAL_SECOND": 5,
		"STATE_REVEAL_THIRD":  6,
		"STATE_REVEAL_FOURTH": 7,
		"STATE_CONFIRM":       8,
		"STATE_END":           9,
		"STATE_SHUFFLE":       30,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[5].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[5]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{5}
}

type WinType int32

const (
	WinType_NULL       WinType = 0
	WinType_WIN_PLAYER WinType = 1
	WinType_WIN_BANKER WinType = 2
)

// Enum value maps for WinType.
var (
	WinType_name = map[int32]string{
		0: "NULL",
		1: "WIN_PLAYER",
		2: "WIN_BANKER",
	}
	WinType_value = map[string]int32{
		"NULL":       0,
		"WIN_PLAYER": 1,
		"WIN_BANKER": 2,
	}
)

func (x WinType) Enum() *WinType {
	p := new(WinType)
	*p = x
	return p
}

func (x WinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[6].Descriptor()
}

func (WinType) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[6]
}

func (x WinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinType.Descriptor instead.
func (WinType) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{6}
}

type PatternType int32

const (
	PatternType_NO_COW      PatternType = 0  // 無牛
	PatternType_COW_ONE     PatternType = 11 // 牛1
	PatternType_COW_TWO     PatternType = 12 // 牛2
	PatternType_COW_THREE   PatternType = 13 // 牛3
	PatternType_COW_FOUR    PatternType = 14 // 牛4
	PatternType_COW_FIVE    PatternType = 15 // 牛5
	PatternType_COW_SIX     PatternType = 16 // 牛6
	PatternType_COW_SEVEN   PatternType = 17 // 牛7
	PatternType_COW_EIGHT   PatternType = 18 // 牛8
	PatternType_COW_NINE    PatternType = 19 // 牛9
	PatternType_COW_COW     PatternType = 20 // 牛牛
	PatternType_FIVE_FLOWER PatternType = 30 // 五公
	PatternType_TYPE_NULL   PatternType = -1
)

// Enum value maps for PatternType.
var (
	PatternType_name = map[int32]string{
		0:  "NO_COW",
		11: "COW_ONE",
		12: "COW_TWO",
		13: "COW_THREE",
		14: "COW_FOUR",
		15: "COW_FIVE",
		16: "COW_SIX",
		17: "COW_SEVEN",
		18: "COW_EIGHT",
		19: "COW_NINE",
		20: "COW_COW",
		30: "FIVE_FLOWER",
		-1: "TYPE_NULL",
	}
	PatternType_value = map[string]int32{
		"NO_COW":      0,
		"COW_ONE":     11,
		"COW_TWO":     12,
		"COW_THREE":   13,
		"COW_FOUR":    14,
		"COW_FIVE":    15,
		"COW_SIX":     16,
		"COW_SEVEN":   17,
		"COW_EIGHT":   18,
		"COW_NINE":    19,
		"COW_COW":     20,
		"FIVE_FLOWER": 30,
		"TYPE_NULL":   -1,
	}
)

func (x PatternType) Enum() *PatternType {
	p := new(PatternType)
	*p = x
	return p
}

func (x PatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[7].Descriptor()
}

func (PatternType) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[7]
}

func (x PatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternType.Descriptor instead.
func (PatternType) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{7}
}

// *
// The status fo the current game.
type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID         string      `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`                         // Unique tableid
	GameRoundID       string      `protobuf:"bytes,2,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`                     // Unique session for the game
	TableID           string      `protobuf:"bytes,3,opt,name=tableID,proto3" json:"tableID,omitempty"`                             // Unique tableid
	State             GameState   `protobuf:"varint,4,opt,name=state,proto3,enum=games.bullfight.GameState" json:"state,omitempty"` // State of the game
	StartTime         int64       `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`                        // Time when game start
	ShoeID            string      `protobuf:"bytes,6,opt,name=shoeID,proto3" json:"shoeID,omitempty"`                               // Shoe ID
	Shoe              int32       `protobuf:"varint,7,opt,name=shoe,proto3" json:"shoe,omitempty"`
	Round             int32       `protobuf:"varint,8,opt,name=round,proto3" json:"round,omitempty"`
	Countdown         int32       `protobuf:"varint,40,opt,name=countdown,proto3" json:"countdown,omitempty"`                                      // Coundown value
	FirstCard         string      `protobuf:"bytes,10,opt,name=firstCard,proto3" json:"firstCard,omitempty"`                                       // First card
	RevealingPosition string      `protobuf:"bytes,39,opt,name=revealingPosition,proto3" json:"revealingPosition,omitempty"`                       // Next position to be revealed: b1 / b2 /... / z5
	B1                string      `protobuf:"bytes,11,opt,name=b1,proto3" json:"b1,omitempty"`                                                     // Card slot Banker 1
	B2                string      `protobuf:"bytes,12,opt,name=b2,proto3" json:"b2,omitempty"`                                                     // Card slot Banker 2
	B3                string      `protobuf:"bytes,13,opt,name=b3,proto3" json:"b3,omitempty"`                                                     // Card slot Banker 3
	B4                string      `protobuf:"bytes,14,opt,name=b4,proto3" json:"b4,omitempty"`                                                     // Card slot Banker 4
	B5                string      `protobuf:"bytes,15,opt,name=b5,proto3" json:"b5,omitempty"`                                                     // Card slot Banker 5
	X1                string      `protobuf:"bytes,16,opt,name=x1,proto3" json:"x1,omitempty"`                                                     // Card slot PlayerX 1
	X2                string      `protobuf:"bytes,17,opt,name=x2,proto3" json:"x2,omitempty"`                                                     // Card slot PlayerX 2
	X3                string      `protobuf:"bytes,18,opt,name=x3,proto3" json:"x3,omitempty"`                                                     // Card slot PlayerX 3
	X4                string      `protobuf:"bytes,19,opt,name=x4,proto3" json:"x4,omitempty"`                                                     // Card slot PlayerX 4
	X5                string      `protobuf:"bytes,20,opt,name=x5,proto3" json:"x5,omitempty"`                                                     // Card slot PlayerX 5
	Y1                string      `protobuf:"bytes,21,opt,name=y1,proto3" json:"y1,omitempty"`                                                     // Card slot PlayerY 1
	Y2                string      `protobuf:"bytes,22,opt,name=y2,proto3" json:"y2,omitempty"`                                                     // Card slot PlayerY 2
	Y3                string      `protobuf:"bytes,23,opt,name=y3,proto3" json:"y3,omitempty"`                                                     // Card slot PlayerY 3
	Y4                string      `protobuf:"bytes,24,opt,name=y4,proto3" json:"y4,omitempty"`                                                     // Card slot PlayerY 4
	Y5                string      `protobuf:"bytes,25,opt,name=y5,proto3" json:"y5,omitempty"`                                                     // Card slot PlayerY 5
	Z1                string      `protobuf:"bytes,26,opt,name=z1,proto3" json:"z1,omitempty"`                                                     // Card slot PlayerZ 1
	Z2                string      `protobuf:"bytes,27,opt,name=z2,proto3" json:"z2,omitempty"`                                                     // Card slot PlayerZ 2
	Z3                string      `protobuf:"bytes,28,opt,name=z3,proto3" json:"z3,omitempty"`                                                     // Card slot PlayerZ 3
	Z4                string      `protobuf:"bytes,29,opt,name=z4,proto3" json:"z4,omitempty"`                                                     // Card slot PlayerZ 4
	Z5                string      `protobuf:"bytes,30,opt,name=z5,proto3" json:"z5,omitempty"`                                                     // Card slot PlayerZ 5
	BankerType        PatternType `protobuf:"varint,31,opt,name=bankerType,proto3,enum=games.bullfight.PatternType" json:"bankerType,omitempty"`   // Banker pattern type
	PlayerXType       PatternType `protobuf:"varint,32,opt,name=playerXType,proto3,enum=games.bullfight.PatternType" json:"playerXType,omitempty"` // PlayerX pattern type
	PlayerYType       PatternType `protobuf:"varint,33,opt,name=playerYType,proto3,enum=games.bullfight.PatternType" json:"playerYType,omitempty"` // PlayerY pattern type
	PlayerZType       PatternType `protobuf:"varint,34,opt,name=playerZType,proto3,enum=games.bullfight.PatternType" json:"playerZType,omitempty"` // PlayerZ pattern type
	PlayerXWin        WinType     `protobuf:"varint,35,opt,name=playerXWin,proto3,enum=games.bullfight.WinType" json:"playerXWin,omitempty"`       // 0  - none, 1 - player X win, 2 - banker win
	PlayerYWin        WinType     `protobuf:"varint,36,opt,name=playerYWin,proto3,enum=games.bullfight.WinType" json:"playerYWin,omitempty"`       // 0  - none, 1 - player Y win, 2 - banker win
	PlayerZWin        WinType     `protobuf:"varint,37,opt,name=playerZWin,proto3,enum=games.bullfight.WinType" json:"playerZWin,omitempty"`       // 0  - none, 1 - player Z win, 2 - banker win
	Redcard           bool        `protobuf:"varint,90,opt,name=redcard,proto3" json:"redcard,omitempty"`                                          // If redcard scan
	MaskedCardsSN     []string    `protobuf:"bytes,103,rep,name=maskedCardsSN,proto3" json:"maskedCardsSN,omitempty"`                              // masked cards sn slice for blockchan
	HashedCards       []string    `protobuf:"bytes,104,rep,name=hashedCards,proto3" json:"hashedCards,omitempty"`                                  // sha256 cards from masked cards sn
	// bool showFirstCard = 105;           // show first card boolean when new shoe
	// string firstCard = 106;             // first card of the shoe
	// int32 currentCardIndex = 107;       // next card to show (i.e. first maskedCardsSN haven't been shown's index)
	// int32 redCardIndex = 108;           // the red card index of the shoe
	CosmosShoeID string           `protobuf:"bytes,109,opt,name=cosmosShoeID,proto3" json:"cosmosShoeID,omitempty"`                                                                            // cosmos blockchain id for the shoe
	HashedLength int32            `protobuf:"varint,110,opt,name=hashedLength,proto3" json:"hashedLength,omitempty"`                                                                           // length of hashedCards
	Lucky        map[string]int32 `protobuf:"bytes,150,rep,name=lucky,proto3" json:"lucky,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Lucky Number and payout ratio
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_bullfight_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_games_bullfight_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{0}
}

func (x *GameStatus) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *GameStatus) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *GameStatus) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *GameStatus) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_STATE_IDLE
}

func (x *GameStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameStatus) GetShoeID() string {
	if x != nil {
		return x.ShoeID
	}
	return ""
}

func (x *GameStatus) GetShoe() int32 {
	if x != nil {
		return x.Shoe
	}
	return 0
}

func (x *GameStatus) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GameStatus) GetCountdown() int32 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *GameStatus) GetFirstCard() string {
	if x != nil {
		return x.FirstCard
	}
	return ""
}

func (x *GameStatus) GetRevealingPosition() string {
	if x != nil {
		return x.RevealingPosition
	}
	return ""
}

func (x *GameStatus) GetB1() string {
	if x != nil {
		return x.B1
	}
	return ""
}

func (x *GameStatus) GetB2() string {
	if x != nil {
		return x.B2
	}
	return ""
}

func (x *GameStatus) GetB3() string {
	if x != nil {
		return x.B3
	}
	return ""
}

func (x *GameStatus) GetB4() string {
	if x != nil {
		return x.B4
	}
	return ""
}

func (x *GameStatus) GetB5() string {
	if x != nil {
		return x.B5
	}
	return ""
}

func (x *GameStatus) GetX1() string {
	if x != nil {
		return x.X1
	}
	return ""
}

func (x *GameStatus) GetX2() string {
	if x != nil {
		return x.X2
	}
	return ""
}

func (x *GameStatus) GetX3() string {
	if x != nil {
		return x.X3
	}
	return ""
}

func (x *GameStatus) GetX4() string {
	if x != nil {
		return x.X4
	}
	return ""
}

func (x *GameStatus) GetX5() string {
	if x != nil {
		return x.X5
	}
	return ""
}

func (x *GameStatus) GetY1() string {
	if x != nil {
		return x.Y1
	}
	return ""
}

func (x *GameStatus) GetY2() string {
	if x != nil {
		return x.Y2
	}
	return ""
}

func (x *GameStatus) GetY3() string {
	if x != nil {
		return x.Y3
	}
	return ""
}

func (x *GameStatus) GetY4() string {
	if x != nil {
		return x.Y4
	}
	return ""
}

func (x *GameStatus) GetY5() string {
	if x != nil {
		return x.Y5
	}
	return ""
}

func (x *GameStatus) GetZ1() string {
	if x != nil {
		return x.Z1
	}
	return ""
}

func (x *GameStatus) GetZ2() string {
	if x != nil {
		return x.Z2
	}
	return ""
}

func (x *GameStatus) GetZ3() string {
	if x != nil {
		return x.Z3
	}
	return ""
}

func (x *GameStatus) GetZ4() string {
	if x != nil {
		return x.Z4
	}
	return ""
}

func (x *GameStatus) GetZ5() string {
	if x != nil {
		return x.Z5
	}
	return ""
}

func (x *GameStatus) GetBankerType() PatternType {
	if x != nil {
		return x.BankerType
	}
	return PatternType_NO_COW
}

func (x *GameStatus) GetPlayerXType() PatternType {
	if x != nil {
		return x.PlayerXType
	}
	return PatternType_NO_COW
}

func (x *GameStatus) GetPlayerYType() PatternType {
	if x != nil {
		return x.PlayerYType
	}
	return PatternType_NO_COW
}

func (x *GameStatus) GetPlayerZType() PatternType {
	if x != nil {
		return x.PlayerZType
	}
	return PatternType_NO_COW
}

func (x *GameStatus) GetPlayerXWin() WinType {
	if x != nil {
		return x.PlayerXWin
	}
	return WinType_NULL
}

func (x *GameStatus) GetPlayerYWin() WinType {
	if x != nil {
		return x.PlayerYWin
	}
	return WinType_NULL
}

func (x *GameStatus) GetPlayerZWin() WinType {
	if x != nil {
		return x.PlayerZWin
	}
	return WinType_NULL
}

func (x *GameStatus) GetRedcard() bool {
	if x != nil {
		return x.Redcard
	}
	return false
}

func (x *GameStatus) GetMaskedCardsSN() []string {
	if x != nil {
		return x.MaskedCardsSN
	}
	return nil
}

func (x *GameStatus) GetHashedCards() []string {
	if x != nil {
		return x.HashedCards
	}
	return nil
}

func (x *GameStatus) GetCosmosShoeID() string {
	if x != nil {
		return x.CosmosShoeID
	}
	return ""
}

func (x *GameStatus) GetHashedLength() int32 {
	if x != nil {
		return x.HashedLength
	}
	return 0
}

func (x *GameStatus) GetLucky() map[string]int32 {
	if x != nil {
		return x.Lucky
	}
	return nil
}

var File_games_bullfight_record_proto protoreflect.FileDescriptor

var file_games_bullfight_record_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xf1, 0x0a, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x65,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x68, 0x6f, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x78, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x78, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x78, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x79, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x79, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x79, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x79, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x35, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x79, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x7a, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x7a, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x33, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x7a, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x34, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x7a, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x35, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x7a, 0x35, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x58, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x58, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x59, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x59, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5a, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5a, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x58, 0x57, 0x69, 0x6e,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x62,
	0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x58, 0x57, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x59, 0x57, 0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x59, 0x57, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5a, 0x57, 0x69, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x57, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5a, 0x57, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x4e, 0x18, 0x67, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x4e,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x68, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x68, 0x6f, 0x65,
	0x49, 0x44, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x53, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x75,
	0x63, 0x6b, 0x79, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x4f, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xa2, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x54, 0x48, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x0c,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x31, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x32, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54,
	0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x31, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x31, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x1b, 0x2a, 0x77, 0x0a,
	0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x49, 0x53, 0x52, 0x54, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41,
	0x4e, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x31, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x32, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x33, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x54,
	0x42, 0x4f, 0x53, 0x53, 0x10, 0x09, 0x2a, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0xf3, 0x01, 0x0a, 0x09, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x41,
	0x4c, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x1e, 0x2a,
	0x33, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0xcd, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x57, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x57, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x57, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x57, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x57,
	0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x57, 0x5f, 0x46,
	0x49, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x58,
	0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10,
	0x11, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x57, 0x5f, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x12,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x57, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x13, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x57, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x49, 0x56, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x42, 0xbd, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0xa2, 0x02, 0x03, 0x47, 0x42, 0x58, 0xaa,
	0x02, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68,
	0x74, 0xca, 0x02, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5c, 0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69,
	0x67, 0x68, 0x74, 0xe2, 0x02, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5c, 0x42, 0x75, 0x6c, 0x6c,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x3a, 0x3a, 0x42, 0x75, 0x6c, 0x6c, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_games_bullfight_record_proto_rawDescOnce sync.Once
	file_games_bullfight_record_proto_rawDescData = file_games_bullfight_record_proto_rawDesc
)

func file_games_bullfight_record_proto_rawDescGZIP() []byte {
	file_games_bullfight_record_proto_rawDescOnce.Do(func() {
		file_games_bullfight_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_games_bullfight_record_proto_rawDescData)
	})
	return file_games_bullfight_record_proto_rawDescData
}

var file_games_bullfight_record_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_games_bullfight_record_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_games_bullfight_record_proto_goTypes = []interface{}{
	(ResourceType)(0),     // 0: games.bullfight.ResourceType
	(Step)(0),             // 1: games.bullfight.Step
	(Seat)(0),             // 2: games.bullfight.Seat
	(ResultRecordType)(0), // 3: games.bullfight.ResultRecordType
	(CancelReason)(0),     // 4: games.bullfight.CancelReason
	(GameState)(0),        // 5: games.bullfight.GameState
	(WinType)(0),          // 6: games.bullfight.WinType
	(PatternType)(0),      // 7: games.bullfight.PatternType
	(*GameStatus)(nil),    // 8: games.bullfight.GameStatus
	nil,                   // 9: games.bullfight.GameStatus.LuckyEntry
}
var file_games_bullfight_record_proto_depIdxs = []int32{
	5, // 0: games.bullfight.GameStatus.state:type_name -> games.bullfight.GameState
	7, // 1: games.bullfight.GameStatus.bankerType:type_name -> games.bullfight.PatternType
	7, // 2: games.bullfight.GameStatus.playerXType:type_name -> games.bullfight.PatternType
	7, // 3: games.bullfight.GameStatus.playerYType:type_name -> games.bullfight.PatternType
	7, // 4: games.bullfight.GameStatus.playerZType:type_name -> games.bullfight.PatternType
	6, // 5: games.bullfight.GameStatus.playerXWin:type_name -> games.bullfight.WinType
	6, // 6: games.bullfight.GameStatus.playerYWin:type_name -> games.bullfight.WinType
	6, // 7: games.bullfight.GameStatus.playerZWin:type_name -> games.bullfight.WinType
	9, // 8: games.bullfight.GameStatus.lucky:type_name -> games.bullfight.GameStatus.LuckyEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_games_bullfight_record_proto_init() }
func file_games_bullfight_record_proto_init() {
	if File_games_bullfight_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_games_bullfight_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_games_bullfight_record_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_games_bullfight_record_proto_goTypes,
		DependencyIndexes: file_games_bullfight_record_proto_depIdxs,
		EnumInfos:         file_games_bullfight_record_proto_enumTypes,
		MessageInfos:      file_games_bullfight_record_proto_msgTypes,
	}.Build()
	File_games_bullfight_record_proto = out.File
	file_games_bullfight_record_proto_rawDesc = nil
	file_games_bullfight_record_proto_goTypes = nil
	file_games_bullfight_record_proto_depIdxs = nil
}
