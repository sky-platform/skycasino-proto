syntax = "proto3";
package games.bullfight;

enum ResourceType {

  // 未指定
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // 牌靴
  SHOE = 1;
  // 例牌
  NORMAL = 2;

}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
enum Step {

  // 未指定
  STEP_UNSPECIFIED = 0;
  // 本局開始
  ROUND_START = 1;
  // 本局完成
  ROUND_FINISHED = 2;
  // 本局取消
  ROUND_CANCELED = 3;

  // 派發起始位子牌(決定順位)
  DEAL_FIRSTCARD = 4;
  // 派發莊家例牌
  DEAL_BANKER_1 = 5;
  // 派發玩家1例牌
  DEAL_PLAYER_1 = 6;
  // 派發玩家2例牌
  DEAL_PLAYER_2 = 7;
  // 派發玩家3例牌
  DEAL_PLAYER_3 = 8;

  // 開放下注
  OPEN_FOR_BETTING = 9;
  // 停止下注
  CLOSE_THE_BETTING = 10;

  // 開莊家1例牌
  SHOW_BANKER_1 = 12;
  // 開玩家1例牌
  SHOW_PLAYER_1 = 13;
  // 開玩家2例牌
  SHOW_PLAYER_2 = 14;
  // 開玩家3例牌
  SHOW_PLAYER_3 = 15;

  // PITBOSS 修改派發例牌
  PITBOSS_MODIFY_BANKER_1 = 24;
  PITBOSS_MODIFY_PLAYER_1 = 25;
  PITBOSS_MODIFY_PLAYER_2 = 26;
  PITBOSS_MODIFY_PLAYER_3 = 27;

}

// 座位功能代碼
enum Seat {

  // 未指定
  SEAT_UNSPECIFIED = 0;
  // 起始牌
  FISRTCARD = 1;
  // 莊家
  BANKER = 2;
  // 玩家1
  PLAYER1 = 3;
  // 玩家2
  PLAYER2 = 4;
  // 玩家3
  PLAYER3 = 5;
  // Dealer 
  DEALER = 6;
  // Pitboss
  PITBOSS = 9;

}

// 結果紀錄類型代碼
enum ResultRecordType {

  // 未指定
  RESULT_RECORD_TYPE_UNSPECIFIED = 0;
  // 遊戲局結束
  ROUND_FINISH = 1;
  // Pitboss 修正
  PITBOSS_MODIFY_RESULT = 2;

}

// 取消原因
enum CancelReason {

  // 未指定，沒有取消
  CANCEL_REASON_UNSPECIFIED = 0;
  // 取消說明原因
  NO_REASON = 1;

}

/**
 * The state of the game flow
 */
enum GameState {
  STATE_IDLE = 0;             // idle
  STATE_START = 1;            // game starting
  STATE_COUNTER_START = 2;    // counter started
  STATE_COUNTER_END = 3;      // scanned the first card ; wait for counter end
  STATE_REVEAL_FIRST = 4;     // counter ended ; wait for the first position scan
  STATE_REVEAL_SECOND = 5;    // scanned the first position ; wait for the second position scan
  STATE_REVEAL_THIRD = 6;     // scanned the second position ; wait for the third position scan
  STATE_REVEAL_FOURTH = 7;    // scanned the third position ; wait for the fourth position scan
  STATE_CONFIRM = 8;          // scanned the fourth position ; wait for confirm
  STATE_END = 9;              // game ended
  // STATE_DISCARD = 9;          // Scane the discard

  STATE_SHUFFLE = 30;         // shuffle cards
}

enum WinType {
  NULL    = 0;
  WIN_PLAYER  = 1;
  WIN_BANKER  = 2;
}

enum PatternType {
  NO_COW          = 0;    // 無牛
  COW_ONE         = 11;   // 牛1
  COW_TWO         = 12;   // 牛2
  COW_THREE       = 13;   // 牛3
  COW_FOUR        = 14;   // 牛4
  COW_FIVE        = 15;   // 牛5
  COW_SIX         = 16;   // 牛6
  COW_SEVEN       = 17;   // 牛7
  COW_EIGHT       = 18;   // 牛8
  COW_NINE        = 19;   // 牛9
  COW_COW         = 20;   // 牛牛
  FIVE_FLOWER    = 30;   // 五公
  TYPE_NULL       = -1;
}

/**
 * The status fo the current game.
 */
message GameStatus {
  string sessionID = 1;       // Unique tableid
  string gameRoundID = 2;     // Unique session for the game
  string tableID = 3;         // Unique tableid
  GameState state = 4;        // State of the game
  int64 startTime = 5;        // Time when game start
  string shoeID = 6;          // Shoe ID
  int32 shoe = 7;
  int32 round = 8;

  // game specify information

  int32 countdown = 40;       // Coundown value

  string firstCard = 10;          // First card
  string revealingPosition = 39;  // Next position to be revealed: b1 / b2 /... / z5
  string b1 = 11;                 // Card slot Banker 1
  string b2 = 12;                 // Card slot Banker 2
  string b3 = 13;                 // Card slot Banker 3
  string b4 = 14;                 // Card slot Banker 4
  string b5 = 15;                 // Card slot Banker 5
  string x1 = 16;                 // Card slot PlayerX 1
  string x2 = 17;                 // Card slot PlayerX 2
  string x3 = 18;                 // Card slot PlayerX 3
  string x4 = 19;                 // Card slot PlayerX 4
  string x5 = 20;                 // Card slot PlayerX 5
  string y1 = 21;                 // Card slot PlayerY 1
  string y2 = 22;                 // Card slot PlayerY 2
  string y3 = 23;                 // Card slot PlayerY 3
  string y4 = 24;                 // Card slot PlayerY 4
  string y5 = 25;                 // Card slot PlayerY 5
  string z1 = 26;                 // Card slot PlayerZ 1
  string z2 = 27;                 // Card slot PlayerZ 2
  string z3 = 28;                 // Card slot PlayerZ 3
  string z4 = 29;                 // Card slot PlayerZ 4
  string z5 = 30;                 // Card slot PlayerZ 5
  PatternType bankerType = 31;    // Banker pattern type
  PatternType playerXType = 32;   // PlayerX pattern type
  PatternType playerYType = 33;   // PlayerY pattern type
  PatternType playerZType = 34;   // PlayerZ pattern type
  WinType playerXWin = 35;        // 0  - none, 1 - player X win, 2 - banker win
  WinType playerYWin = 36;        // 0  - none, 1 - player Y win, 2 - banker win
  WinType playerZWin = 37;        // 0  - none, 1 - player Z win, 2 - banker win

  bool redcard = 90;          // If redcard scan
  repeated string maskedCardsSN = 103; // masked cards sn slice for blockchan
  repeated string hashedCards = 104;  // sha256 cards from masked cards sn
  // bool showFirstCard = 105;           // show first card boolean when new shoe
  // string firstCard = 106;             // first card of the shoe
  // int32 currentCardIndex = 107;       // next card to show (i.e. first maskedCardsSN haven't been shown's index)
  // int32 redCardIndex = 108;           // the red card index of the shoe
  string cosmosShoeID = 109;          // cosmos blockchain id for the shoe
  int32 hashedLength = 110;           // length of hashedCards
  map<string, int32> lucky = 150;     // Lucky Number and payout ratio
}