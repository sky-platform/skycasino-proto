// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: recorder/record.proto

package recorder

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 動作類型
type StepActionType int32

const (
	// 未指定
	StepActionType_STEP_ACTION_TYPE_UNSPECIFIED StepActionType = 0
	// 派發資源
	StepActionType_ADD StepActionType = 1
	// 設定指定資源
	StepActionType_SET StepActionType = 2
	// 改寫全部資源;
	StepActionType_SETALL StepActionType = 3
	// 將資源從場上移除
	StepActionType_REMOVE StepActionType = 4
	// 讀取卡牌資料
	StepActionType_READ StepActionType = 5
	// 讀卡但不可見
	StepActionType_READ_UNVISIBLE StepActionType = 6
	// 移轉資源
	StepActionType_TRANSFER StepActionType = 7
	// 卡片正反面
	StepActionType_VISIBLE StepActionType = 8
	// 卡牌狀態改變
	StepActionType_STATUS StepActionType = 9
	// 此步驟不須修改資源
	StepActionType_NONE StepActionType = 10
)

// Enum value maps for StepActionType.
var (
	StepActionType_name = map[int32]string{
		0:  "STEP_ACTION_TYPE_UNSPECIFIED",
		1:  "ADD",
		2:  "SET",
		3:  "SETALL",
		4:  "REMOVE",
		5:  "READ",
		6:  "READ_UNVISIBLE",
		7:  "TRANSFER",
		8:  "VISIBLE",
		9:  "STATUS",
		10: "NONE",
	}
	StepActionType_value = map[string]int32{
		"STEP_ACTION_TYPE_UNSPECIFIED": 0,
		"ADD":                          1,
		"SET":                          2,
		"SETALL":                       3,
		"REMOVE":                       4,
		"READ":                         5,
		"READ_UNVISIBLE":               6,
		"TRANSFER":                     7,
		"VISIBLE":                      8,
		"STATUS":                       9,
		"NONE":                         10,
	}
)

func (x StepActionType) Enum() *StepActionType {
	p := new(StepActionType)
	*p = x
	return p
}

func (x StepActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_record_proto_enumTypes[0].Descriptor()
}

func (StepActionType) Type() protoreflect.EnumType {
	return &file_recorder_record_proto_enumTypes[0]
}

func (x StepActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepActionType.Descriptor instead.
func (StepActionType) EnumDescriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{0}
}

// 卡牌，代表在此局中使用的各類物品
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 卡牌ID：牌唯一碼，同ID表示同一張實體牌。不使用此欄位填0。
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 卡牌代碼
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// 順序
	Index int64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// 可見
	Visible bool `protobuf:"varint,4,opt,name=visible,proto3" json:"visible,omitempty"`
	// 橫放、直放...
	Status *int64 `protobuf:"varint,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// 明文
	PlainText *string `protobuf:"bytes,8,opt,name=plain_text,json=plainText,proto3,oneof" json:"plain_text,omitempty"`
	// 簽章
	Signature *string `protobuf:"bytes,9,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	// 簽章方法
	SignAlgorithm *string `protobuf:"bytes,10,opt,name=sign_algorithm,json=signAlgorithm,proto3,oneof" json:"sign_algorithm,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Card) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Card) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Card) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Card) GetPlainText() string {
	if x != nil && x.PlainText != nil {
		return *x.PlainText
	}
	return ""
}

func (x *Card) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *Card) GetSignAlgorithm() string {
	if x != nil && x.SignAlgorithm != nil {
		return *x.SignAlgorithm
	}
	return ""
}

// 卡牌列表
type CardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 列表
	List []*Card `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CardList) Reset() {
	*x = CardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardList) ProtoMessage() {}

func (x *CardList) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardList.ProtoReflect.Descriptor instead.
func (*CardList) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{1}
}

func (x *CardList) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CardList) GetList() []*Card {
	if x != nil {
		return x.List
	}
	return nil
}

// 執行動作：對某些資源進行增、刪、移轉
type StepAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行為說明代碼：StepActionCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// 動作類型
	Type StepActionType `protobuf:"varint,3,opt,name=type,proto3,enum=recorder.StepActionType" json:"type,omitempty"`
	// 資源擁有座位。
	SourceSeat *int32 `protobuf:"varint,4,opt,name=source_seat,json=sourceSeat,proto3,oneof" json:"source_seat,omitempty"`
	// 資源轉移目標座位。
	TargetSeat *int32 `protobuf:"varint,5,opt,name=target_seat,json=targetSeat,proto3,oneof" json:"target_seat,omitempty"`
	// 目標卡牌資源
	// key: ResourceTypeCode, value: 卡牌陣列
	Cards map[int32]*CardList `protobuf:"bytes,6,rep,name=cards,proto3" json:"cards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 目標分數資源
	// key: ResourceTypeCode, value: 分數值。
	Scores map[int32]int64 `protobuf:"bytes,7,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// （可選）附加資料
	Data *anypb.Any `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StepAction) Reset() {
	*x = StepAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepAction) ProtoMessage() {}

func (x *StepAction) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepAction.ProtoReflect.Descriptor instead.
func (*StepAction) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{2}
}

func (x *StepAction) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StepAction) GetType() StepActionType {
	if x != nil {
		return x.Type
	}
	return StepActionType_STEP_ACTION_TYPE_UNSPECIFIED
}

func (x *StepAction) GetSourceSeat() int32 {
	if x != nil && x.SourceSeat != nil {
		return *x.SourceSeat
	}
	return 0
}

func (x *StepAction) GetTargetSeat() int32 {
	if x != nil && x.TargetSeat != nil {
		return *x.TargetSeat
	}
	return 0
}

func (x *StepAction) GetCards() map[int32]*CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *StepAction) GetScores() map[int32]int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *StepAction) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// 遊戲步驟
type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 步驟代碼：StepCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// 玩家、執行者：SeatCode
	Seat *int32 `protobuf:"varint,3,opt,name=seat,proto3,oneof" json:"seat,omitempty"`
	// 時間戳
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 執行動作
	Actions []*StepAction `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	// 執行錯誤
	Error *string `protobuf:"bytes,8,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// 取消
	Cancel *bool `protobuf:"varint,9,opt,name=cancel,proto3,oneof" json:"cancel,omitempty"`
	// 分配毫秒數
	Duration *int64 `protobuf:"varint,10,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{3}
}

func (x *Step) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Step) GetSeat() int32 {
	if x != nil && x.Seat != nil {
		return *x.Seat
	}
	return 0
}

func (x *Step) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Step) GetActions() []*StepAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Step) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *Step) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

func (x *Step) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

// 座位
type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 座位功能代碼：SeatCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// 各類手牌
	// key: ResourceTypeCode, value: 卡牌陣列
	Cards map[int32]*CardList `protobuf:"bytes,3,rep,name=cards,proto3" json:"cards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 各類分數
	// key: ResourceTypeCode, value: 分數值。
	Scores map[int32]int64 `protobuf:"bytes,4,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Seat) Reset() {
	*x = Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{4}
}

func (x *Seat) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Seat) GetCards() map[int32]*CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Seat) GetScores() map[int32]int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

// 記錄各座位狀態
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 判讀類型代碼：ResultRecordTypeCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// 紀錄者座位代碼
	BySeat *int32 `protobuf:"varint,3,opt,name=by_seat,json=bySeat,proto3,oneof" json:"by_seat,omitempty"`
	// 時間戳
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 座位組
	// key: SeatCode, value: Seat
	Seats map[int32]*Seat `protobuf:"bytes,5,rep,name=seats,proto3" json:"seats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{5}
}

func (x *Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Result) GetBySeat() int32 {
	if x != nil && x.BySeat != nil {
		return *x.BySeat
	}
	return 0
}

func (x *Result) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Result) GetSeats() map[int32]*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

// 多媒體
type URLMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 類型：hls, flv...
	Mime string `protobuf:"bytes,2,opt,name=mime,proto3" json:"mime,omitempty"`
	// url
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *URLMedia) Reset() {
	*x = URLMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLMedia) ProtoMessage() {}

func (x *URLMedia) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLMedia.ProtoReflect.Descriptor instead.
func (*URLMedia) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{6}
}

func (x *URLMedia) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *URLMedia) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *URLMedia) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 紀錄
type RoundRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 遊戲類型
	GameType string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3" json:"game_subtype,omitempty"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,4,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 桌代碼
	TableCode string `protobuf:"bytes,6,opt,name=table_code,json=tableCode,proto3" json:"table_code,omitempty"`
	// 排班代碼
	ShiftCode string `protobuf:"bytes,7,opt,name=shift_code,json=shiftCode,proto3" json:"shift_code,omitempty"`
	// 此排班局數
	ShiftRound string `protobuf:"bytes,8,opt,name=shift_round,json=shiftRound,proto3" json:"shift_round,omitempty"`
	// 局代碼
	RoundCode string `protobuf:"bytes,9,opt,name=round_code,json=roundCode,proto3" json:"round_code,omitempty"`
	// 使用洗牌代碼
	ShuffleCode string `protobuf:"bytes,10,opt,name=shuffle_code,json=shuffleCode,proto3" json:"shuffle_code,omitempty"`
	// 使用此洗牌第幾局，從1開始計算
	ShuffleRound int64 `protobuf:"varint,11,opt,name=shuffle_round,json=shuffleRound,proto3" json:"shuffle_round,omitempty"`
	// 開始時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=ts_start,json=tsStart,proto3" json:"ts_start,omitempty"`
	// 座位組
	// key: SeatCode, value: Seat
	Seats map[int32]*Seat `protobuf:"bytes,13,rep,name=seats,proto3" json:"seats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 玩家入座
	// key: SeatCode, value: 玩家code。
	Players map[int32]string `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 歷程
	Process []*Step `protobuf:"bytes,16,rep,name=process,proto3" json:"process,omitempty"`
	// 判讀
	Results []*Result `protobuf:"bytes,17,rep,name=results,proto3" json:"results,omitempty"`
	// 結束
	IsEnd bool `protobuf:"varint,18,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	// 結束時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=ts_end,json=tsEnd,proto3" json:"ts_end,omitempty"`
	// 取消
	Cancel *bool `protobuf:"varint,20,opt,name=cancel,proto3,oneof" json:"cancel,omitempty"`
	// 取消代碼：CancelReasonCode
	CancelCode *string `protobuf:"bytes,21,opt,name=cancel_code,json=cancelCode,proto3,oneof" json:"cancel_code,omitempty"`
	// 取消備註
	CancelMessage *string `protobuf:"bytes,22,opt,name=cancel_message,json=cancelMessage,proto3,oneof" json:"cancel_message,omitempty"`
	// 附加媒體
	Mideas map[string]*URLMedia `protobuf:"bytes,24,rep,name=mideas,proto3" json:"mideas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoundRecord) Reset() {
	*x = RoundRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundRecord) ProtoMessage() {}

func (x *RoundRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundRecord.ProtoReflect.Descriptor instead.
func (*RoundRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{7}
}

func (x *RoundRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RoundRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *RoundRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *RoundRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *RoundRecord) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RoundRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *RoundRecord) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *RoundRecord) GetShiftRound() string {
	if x != nil {
		return x.ShiftRound
	}
	return ""
}

func (x *RoundRecord) GetRoundCode() string {
	if x != nil {
		return x.RoundCode
	}
	return ""
}

func (x *RoundRecord) GetShuffleCode() string {
	if x != nil {
		return x.ShuffleCode
	}
	return ""
}

func (x *RoundRecord) GetShuffleRound() int64 {
	if x != nil {
		return x.ShuffleRound
	}
	return 0
}

func (x *RoundRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *RoundRecord) GetSeats() map[int32]*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *RoundRecord) GetPlayers() map[int32]string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoundRecord) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RoundRecord) GetProcess() []*Step {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *RoundRecord) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RoundRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *RoundRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

func (x *RoundRecord) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

func (x *RoundRecord) GetCancelCode() string {
	if x != nil && x.CancelCode != nil {
		return *x.CancelCode
	}
	return ""
}

func (x *RoundRecord) GetCancelMessage() string {
	if x != nil && x.CancelMessage != nil {
		return *x.CancelMessage
	}
	return ""
}

func (x *RoundRecord) GetMideas() map[string]*URLMedia {
	if x != nil {
		return x.Mideas
	}
	return nil
}

type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 卡牌
	Cards *CardList `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards,omitempty"`
	// 起始位置（削牌後）
	StartIndex int64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// 切牌位置
	CutIndex *int64 `protobuf:"varint,3,opt,name=cut_index,json=cutIndex,proto3,oneof" json:"cut_index,omitempty"`
	// 目前位置
	Index int64 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Deck) Reset() {
	*x = Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{8}
}

func (x *Deck) GetCards() *CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Deck) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *Deck) GetCutIndex() int64 {
	if x != nil && x.CutIndex != nil {
		return *x.CutIndex
	}
	return 0
}

func (x *Deck) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// 洗牌紀錄
type ShuffleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 遊戲類型
	GameType string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3" json:"game_subtype,omitempty"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,4,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	// 桌代碼
	TableCode string `protobuf:"bytes,5,opt,name=table_code,json=tableCode,proto3" json:"table_code,omitempty"`
	// 使用洗牌ID
	ShuffleCode string `protobuf:"bytes,6,opt,name=shuffle_code,json=shuffleCode,proto3" json:"shuffle_code,omitempty"`
	// 開始洗牌時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ts_start,json=tsStart,proto3" json:"ts_start,omitempty"`
	// 結束洗牌時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ts_end,json=tsEnd,proto3" json:"ts_end,omitempty"`
	// cardList
	Decks map[int32]*Deck `protobuf:"bytes,11,rep,name=decks,proto3" json:"decks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 已經完成
	IsEnd bool `protobuf:"varint,12,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
}

func (x *ShuffleRecord) Reset() {
	*x = ShuffleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleRecord) ProtoMessage() {}

func (x *ShuffleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleRecord.ProtoReflect.Descriptor instead.
func (*ShuffleRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{9}
}

func (x *ShuffleRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShuffleRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *ShuffleRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *ShuffleRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *ShuffleRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *ShuffleRecord) GetShuffleCode() string {
	if x != nil {
		return x.ShuffleCode
	}
	return ""
}

func (x *ShuffleRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *ShuffleRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

func (x *ShuffleRecord) GetDecks() map[int32]*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

func (x *ShuffleRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

type Bead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V           uint32            `protobuf:"varint,1,opt,name=V,proto3" json:"V,omitempty"`
	B           uint32            `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
	P           uint32            `protobuf:"varint,3,opt,name=P,proto3" json:"P,omitempty"`
	W           uint32            `protobuf:"varint,4,opt,name=W,proto3" json:"W,omitempty"`
	GameRoundID string            `protobuf:"bytes,5,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`
	Video       string            `protobuf:"bytes,6,opt,name=video,proto3" json:"video,omitempty"`
	Hl          uint32            `protobuf:"varint,7,opt,name=Hl,proto3" json:"Hl,omitempty"`
	LuckCards   map[string]uint32 `protobuf:"bytes,8,rep,name=LuckCards,proto3" json:"LuckCards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Odds        int32             `protobuf:"varint,9,opt,name=odds,proto3" json:"odds,omitempty"`
	Shoe        int32             `protobuf:"varint,10,opt,name=shoe,proto3" json:"shoe,omitempty"`
	Round       int32             `protobuf:"varint,11,opt,name=round,proto3" json:"round,omitempty"`
	Dice        []uint32          `protobuf:"varint,12,rep,packed,name=dice,proto3" json:"dice,omitempty"`
}

func (x *Bead) Reset() {
	*x = Bead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bead) ProtoMessage() {}

func (x *Bead) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bead.ProtoReflect.Descriptor instead.
func (*Bead) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{10}
}

func (x *Bead) GetV() uint32 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *Bead) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *Bead) GetP() uint32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *Bead) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Bead) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *Bead) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *Bead) GetHl() uint32 {
	if x != nil {
		return x.Hl
	}
	return 0
}

func (x *Bead) GetLuckCards() map[string]uint32 {
	if x != nil {
		return x.LuckCards
	}
	return nil
}

func (x *Bead) GetOdds() int32 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *Bead) GetShoe() int32 {
	if x != nil {
		return x.Shoe
	}
	return 0
}

func (x *Bead) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Bead) GetDice() []uint32 {
	if x != nil {
		return x.Dice
	}
	return nil
}

type GameRoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRoundID string            `protobuf:"bytes,1,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`
	A1          string            `protobuf:"bytes,2,opt,name=A1,proto3" json:"A1,omitempty"`
	A2          string            `protobuf:"bytes,3,opt,name=A2,proto3" json:"A2,omitempty"`
	A3          string            `protobuf:"bytes,4,opt,name=A3,proto3" json:"A3,omitempty"`
	B1          string            `protobuf:"bytes,5,opt,name=B1,proto3" json:"B1,omitempty"`
	B2          string            `protobuf:"bytes,6,opt,name=B2,proto3" json:"B2,omitempty"`
	B3          string            `protobuf:"bytes,7,opt,name=B3,proto3" json:"B3,omitempty"`
	ABw         string            `protobuf:"bytes,8,opt,name=ABw,proto3" json:"ABw,omitempty"`
	BBw         string            `protobuf:"bytes,9,opt,name=BBw,proto3" json:"BBw,omitempty"`
	Bv          string            `protobuf:"bytes,10,opt,name=Bv,proto3" json:"Bv,omitempty"`
	Pv          string            `protobuf:"bytes,11,opt,name=Pv,proto3" json:"Pv,omitempty"`
	Result      uint32            `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Round       uint32            `protobuf:"varint,13,opt,name=round,proto3" json:"round,omitempty"`
	Shoe        uint32            `protobuf:"varint,14,opt,name=shoe,proto3" json:"shoe,omitempty"`
	LuckCards   map[string]uint32 `protobuf:"bytes,15,rep,name=luckCards,proto3" json:"luckCards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mul         string            `protobuf:"bytes,16,opt,name=mul,proto3" json:"mul,omitempty"`
	BPattern    string            `protobuf:"bytes,17,opt,name=BPattern,proto3" json:"BPattern,omitempty"`
	PPattern    string            `protobuf:"bytes,18,opt,name=PPattern,proto3" json:"PPattern,omitempty"`
	B           uint32            `protobuf:"varint,19,opt,name=B,proto3" json:"B,omitempty"`
	P1          uint32            `protobuf:"varint,20,opt,name=P1,proto3" json:"P1,omitempty"`
	P2          uint32            `protobuf:"varint,21,opt,name=P2,proto3" json:"P2,omitempty"`
	P3          uint32            `protobuf:"varint,22,opt,name=P3,proto3" json:"P3,omitempty"`
	P1W         uint32            `protobuf:"varint,23,opt,name=P1W,proto3" json:"P1W,omitempty"`
	P2W         uint32            `protobuf:"varint,24,opt,name=P2W,proto3" json:"P2W,omitempty"`
	P3W         uint32            `protobuf:"varint,25,opt,name=P3W,proto3" json:"P3W,omitempty"`
}

func (x *GameRoundInfo) Reset() {
	*x = GameRoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRoundInfo) ProtoMessage() {}

func (x *GameRoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRoundInfo.ProtoReflect.Descriptor instead.
func (*GameRoundInfo) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{11}
}

func (x *GameRoundInfo) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *GameRoundInfo) GetA1() string {
	if x != nil {
		return x.A1
	}
	return ""
}

func (x *GameRoundInfo) GetA2() string {
	if x != nil {
		return x.A2
	}
	return ""
}

func (x *GameRoundInfo) GetA3() string {
	if x != nil {
		return x.A3
	}
	return ""
}

func (x *GameRoundInfo) GetB1() string {
	if x != nil {
		return x.B1
	}
	return ""
}

func (x *GameRoundInfo) GetB2() string {
	if x != nil {
		return x.B2
	}
	return ""
}

func (x *GameRoundInfo) GetB3() string {
	if x != nil {
		return x.B3
	}
	return ""
}

func (x *GameRoundInfo) GetABw() string {
	if x != nil {
		return x.ABw
	}
	return ""
}

func (x *GameRoundInfo) GetBBw() string {
	if x != nil {
		return x.BBw
	}
	return ""
}

func (x *GameRoundInfo) GetBv() string {
	if x != nil {
		return x.Bv
	}
	return ""
}

func (x *GameRoundInfo) GetPv() string {
	if x != nil {
		return x.Pv
	}
	return ""
}

func (x *GameRoundInfo) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GameRoundInfo) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GameRoundInfo) GetShoe() uint32 {
	if x != nil {
		return x.Shoe
	}
	return 0
}

func (x *GameRoundInfo) GetLuckCards() map[string]uint32 {
	if x != nil {
		return x.LuckCards
	}
	return nil
}

func (x *GameRoundInfo) GetMul() string {
	if x != nil {
		return x.Mul
	}
	return ""
}

func (x *GameRoundInfo) GetBPattern() string {
	if x != nil {
		return x.BPattern
	}
	return ""
}

func (x *GameRoundInfo) GetPPattern() string {
	if x != nil {
		return x.PPattern
	}
	return ""
}

func (x *GameRoundInfo) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *GameRoundInfo) GetP1() uint32 {
	if x != nil {
		return x.P1
	}
	return 0
}

func (x *GameRoundInfo) GetP2() uint32 {
	if x != nil {
		return x.P2
	}
	return 0
}

func (x *GameRoundInfo) GetP3() uint32 {
	if x != nil {
		return x.P3
	}
	return 0
}

func (x *GameRoundInfo) GetP1W() uint32 {
	if x != nil {
		return x.P1W
	}
	return 0
}

func (x *GameRoundInfo) GetP2W() uint32 {
	if x != nil {
		return x.P2W
	}
	return 0
}

func (x *GameRoundInfo) GetP3W() uint32 {
	if x != nil {
		return x.P3W
	}
	return 0
}

type RoadMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beads        []*Bead `protobuf:"bytes,1,rep,name=beads,proto3" json:"beads,omitempty"`
	ColumnLength int32   `protobuf:"varint,2,opt,name=columnLength,proto3" json:"columnLength,omitempty"`
}

func (x *RoadMap) Reset() {
	*x = RoadMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoadMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoadMap) ProtoMessage() {}

func (x *RoadMap) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoadMap.ProtoReflect.Descriptor instead.
func (*RoadMap) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{12}
}

func (x *RoadMap) GetBeads() []*Bead {
	if x != nil {
		return x.Beads
	}
	return nil
}

func (x *RoadMap) GetColumnLength() int32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

// 排班
type ShiftRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 遊戲類型
	GameType string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3" json:"game_subtype,omitempty"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,4,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 桌代碼
	TableCode string `protobuf:"bytes,6,opt,name=table_code,json=tableCode,proto3" json:"table_code,omitempty"`
	// 班代碼
	ShiftCode string `protobuf:"bytes,7,opt,name=shift_code,json=shiftCode,proto3" json:"shift_code,omitempty"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 開始時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ts_start,json=tsStart,proto3" json:"ts_start,omitempty"`
	// 洗牌
	ShuffleCodes []string `protobuf:"bytes,10,rep,name=shuffle_codes,json=shuffleCodes,proto3" json:"shuffle_codes,omitempty"`
	// 執行遊戲局
	RoundCodes []string `protobuf:"bytes,11,rep,name=round_codes,json=roundCodes,proto3" json:"round_codes,omitempty"`
	// 結束
	IsEnd bool `protobuf:"varint,12,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	// 結束時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=ts_end,json=tsEnd,proto3" json:"ts_end,omitempty"`
	// TODO: 路紙
	TableID      string `protobuf:"bytes,14,opt,name=tableID,proto3" json:"tableID,omitempty"`
	ShoeID       string `protobuf:"bytes,15,opt,name=shoeID,proto3" json:"shoeID,omitempty"`
	TotalCount   int32  `protobuf:"varint,16,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	ShoeRoundNum int32  `protobuf:"varint,17,opt,name=shoeRoundNum,proto3" json:"shoeRoundNum,omitempty"`
	// Statistic Map
	Statistic      map[string]int32          `protobuf:"bytes,20,rep,name=statistic,proto3" json:"statistic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ComboStatistic map[string]int32          `protobuf:"bytes,21,rep,name=comboStatistic,proto3" json:"comboStatistic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ResultCount    map[int32]int32           `protobuf:"bytes,22,rep,name=resultCount,proto3" json:"resultCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LoShow         map[string]int32          `protobuf:"bytes,23,rep,name=loShow,proto3" json:"loShow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LoNoShow       map[string]int32          `protobuf:"bytes,24,rep,name=loNoShow,proto3" json:"loNoShow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RcShow         map[string]int32          `protobuf:"bytes,25,rep,name=rcShow,proto3" json:"rcShow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RcNoShow       map[string]int32          `protobuf:"bytes,26,rep,name=rcNoShow,proto3" json:"rcNoShow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Beads          []*Bead                   `protobuf:"bytes,27,rep,name=beads,proto3" json:"beads,omitempty"`
	Info           []*GameRoundInfo          `protobuf:"bytes,28,rep,name=info,proto3" json:"info,omitempty"`
	InfoMap        map[string]*GameRoundInfo `protobuf:"bytes,29,rep,name=infoMap,proto3" json:"infoMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoadMap        *RoadMap                  `protobuf:"bytes,30,opt,name=roadMap,proto3" json:"roadMap,omitempty"`
	RoadMapBytes   [][]byte                  `protobuf:"bytes,31,rep,name=roadMapBytes,proto3" json:"roadMapBytes,omitempty"`
}

func (x *ShiftRecord) Reset() {
	*x = ShiftRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftRecord) ProtoMessage() {}

func (x *ShiftRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftRecord.ProtoReflect.Descriptor instead.
func (*ShiftRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{13}
}

func (x *ShiftRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShiftRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *ShiftRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *ShiftRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *ShiftRecord) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *ShiftRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *ShiftRecord) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *ShiftRecord) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ShiftRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *ShiftRecord) GetShuffleCodes() []string {
	if x != nil {
		return x.ShuffleCodes
	}
	return nil
}

func (x *ShiftRecord) GetRoundCodes() []string {
	if x != nil {
		return x.RoundCodes
	}
	return nil
}

func (x *ShiftRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *ShiftRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

func (x *ShiftRecord) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *ShiftRecord) GetShoeID() string {
	if x != nil {
		return x.ShoeID
	}
	return ""
}

func (x *ShiftRecord) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ShiftRecord) GetShoeRoundNum() int32 {
	if x != nil {
		return x.ShoeRoundNum
	}
	return 0
}

func (x *ShiftRecord) GetStatistic() map[string]int32 {
	if x != nil {
		return x.Statistic
	}
	return nil
}

func (x *ShiftRecord) GetComboStatistic() map[string]int32 {
	if x != nil {
		return x.ComboStatistic
	}
	return nil
}

func (x *ShiftRecord) GetResultCount() map[int32]int32 {
	if x != nil {
		return x.ResultCount
	}
	return nil
}

func (x *ShiftRecord) GetLoShow() map[string]int32 {
	if x != nil {
		return x.LoShow
	}
	return nil
}

func (x *ShiftRecord) GetLoNoShow() map[string]int32 {
	if x != nil {
		return x.LoNoShow
	}
	return nil
}

func (x *ShiftRecord) GetRcShow() map[string]int32 {
	if x != nil {
		return x.RcShow
	}
	return nil
}

func (x *ShiftRecord) GetRcNoShow() map[string]int32 {
	if x != nil {
		return x.RcNoShow
	}
	return nil
}

func (x *ShiftRecord) GetBeads() []*Bead {
	if x != nil {
		return x.Beads
	}
	return nil
}

func (x *ShiftRecord) GetInfo() []*GameRoundInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ShiftRecord) GetInfoMap() map[string]*GameRoundInfo {
	if x != nil {
		return x.InfoMap
	}
	return nil
}

func (x *ShiftRecord) GetRoadMap() *RoadMap {
	if x != nil {
		return x.RoadMap
	}
	return nil
}

func (x *ShiftRecord) GetRoadMapBytes() [][]byte {
	if x != nil {
		return x.RoadMapBytes
	}
	return nil
}

var File_recorder_record_proto protoreflect.FileDescriptor

var file_recorder_record_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xaa, 0x03, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e,
	0x03, 0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x48, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22,
	0x4b, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x04, 0x0a,
	0x0a, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03,
	0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x9a,
	0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1a, 0x9a,
	0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x4c, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x22, 0xb6, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x65, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x9a, 0x84, 0x9e,
	0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03,
	0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc3, 0x02, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x4c,
	0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x79, 0x53, 0x65, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x06, 0x62, 0x79, 0x53, 0x65, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x1a,
	0x48, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x79,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x22, 0x44, 0x0a, 0x08, 0x55, 0x52, 0x4c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xfe, 0x0b, 0x0a, 0x0b,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x73, 0x65, 0x61, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x9a,
	0x84, 0x9e, 0x03, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x74, 0x61, 0x67, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e,
	0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a,
	0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84,
	0x9e, 0x03, 0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x69, 0x64, 0x65, 0x61, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x69, 0x64,
	0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x64, 0x65, 0x61, 0x73,
	0x1a, 0x48, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4d, 0x0a, 0x0b, 0x4d, 0x69, 0x64, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x52, 0x4c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x40, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9e, 0x04, 0x0a, 0x0d, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x4e, 0x0a, 0x06, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a, 0x84, 0x9e,
	0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x12,
	0x55, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64,
	0x65, 0x63, 0x6b, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x1a, 0x48, 0x0a,
	0x0a, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x02, 0x0a, 0x04, 0x42, 0x65, 0x61, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x56, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x56, 0x12, 0x0c,
	0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x42, 0x12, 0x0c, 0x0a, 0x01,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x50, 0x12, 0x0c, 0x0a, 0x01, 0x57, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x57, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x48, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x48, 0x6c,
	0x12, 0x3b, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x65, 0x61, 0x64, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x64, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x69, 0x63, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x04,
	0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x41,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x41,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x41,
	0x33, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42,
	0x33, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x42, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x41, 0x42, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x42, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x42, 0x42, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x42, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x50, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x75, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x75, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x50, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x50, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x33, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x50, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x57, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x50, 0x31, 0x57, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x32, 0x57, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x32, 0x57, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x33, 0x57,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x33, 0x57, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c,
	0x75, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x07, 0x52, 0x6f, 0x61,
	0x64, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x65, 0x61, 0x64, 0x52, 0x05, 0x62, 0x65, 0x61, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x9b,
	0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03,
	0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x06,
	0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x65, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x53, 0x68, 0x6f,
	0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x3f,
	0x0a, 0x08, 0x6c, 0x6f, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x39, 0x0a, 0x06, 0x72, 0x63, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x63, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x72, 0x63, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x63,
	0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x52, 0x63, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x63, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x05, 0x62,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x61, 0x64, 0x52, 0x05, 0x62, 0x65, 0x61, 0x64,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x07,
	0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70,
	0x52, 0x07, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x61,
	0x64, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x6f, 0x53, 0x68, 0x6f,
	0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4c, 0x6f, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x52, 0x63, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x63,
	0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xab, 0x01, 0x0a,
	0x0e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x09,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x42, 0x92, 0x01, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0xca, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xe2, 0x02, 0x14,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recorder_record_proto_rawDescOnce sync.Once
	file_recorder_record_proto_rawDescData = file_recorder_record_proto_rawDesc
)

func file_recorder_record_proto_rawDescGZIP() []byte {
	file_recorder_record_proto_rawDescOnce.Do(func() {
		file_recorder_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_record_proto_rawDescData)
	})
	return file_recorder_record_proto_rawDescData
}

var file_recorder_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_recorder_record_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_recorder_record_proto_goTypes = []interface{}{
	(StepActionType)(0),           // 0: recorder.StepActionType
	(*Card)(nil),                  // 1: recorder.Card
	(*CardList)(nil),              // 2: recorder.CardList
	(*StepAction)(nil),            // 3: recorder.StepAction
	(*Step)(nil),                  // 4: recorder.Step
	(*Seat)(nil),                  // 5: recorder.Seat
	(*Result)(nil),                // 6: recorder.Result
	(*URLMedia)(nil),              // 7: recorder.URLMedia
	(*RoundRecord)(nil),           // 8: recorder.RoundRecord
	(*Deck)(nil),                  // 9: recorder.Deck
	(*ShuffleRecord)(nil),         // 10: recorder.ShuffleRecord
	(*Bead)(nil),                  // 11: recorder.Bead
	(*GameRoundInfo)(nil),         // 12: recorder.GameRoundInfo
	(*RoadMap)(nil),               // 13: recorder.RoadMap
	(*ShiftRecord)(nil),           // 14: recorder.ShiftRecord
	nil,                           // 15: recorder.StepAction.CardsEntry
	nil,                           // 16: recorder.StepAction.ScoresEntry
	nil,                           // 17: recorder.Seat.CardsEntry
	nil,                           // 18: recorder.Seat.ScoresEntry
	nil,                           // 19: recorder.Result.SeatsEntry
	nil,                           // 20: recorder.RoundRecord.SeatsEntry
	nil,                           // 21: recorder.RoundRecord.PlayersEntry
	nil,                           // 22: recorder.RoundRecord.TagsEntry
	nil,                           // 23: recorder.RoundRecord.MideasEntry
	nil,                           // 24: recorder.ShuffleRecord.DecksEntry
	nil,                           // 25: recorder.Bead.LuckCardsEntry
	nil,                           // 26: recorder.GameRoundInfo.LuckCardsEntry
	nil,                           // 27: recorder.ShiftRecord.TagsEntry
	nil,                           // 28: recorder.ShiftRecord.StatisticEntry
	nil,                           // 29: recorder.ShiftRecord.ComboStatisticEntry
	nil,                           // 30: recorder.ShiftRecord.ResultCountEntry
	nil,                           // 31: recorder.ShiftRecord.LoShowEntry
	nil,                           // 32: recorder.ShiftRecord.LoNoShowEntry
	nil,                           // 33: recorder.ShiftRecord.RcShowEntry
	nil,                           // 34: recorder.ShiftRecord.RcNoShowEntry
	nil,                           // 35: recorder.ShiftRecord.InfoMapEntry
	(*anypb.Any)(nil),             // 36: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 37: google.protobuf.Timestamp
}
var file_recorder_record_proto_depIdxs = []int32{
	1,  // 0: recorder.CardList.list:type_name -> recorder.Card
	0,  // 1: recorder.StepAction.type:type_name -> recorder.StepActionType
	15, // 2: recorder.StepAction.cards:type_name -> recorder.StepAction.CardsEntry
	16, // 3: recorder.StepAction.scores:type_name -> recorder.StepAction.ScoresEntry
	36, // 4: recorder.StepAction.data:type_name -> google.protobuf.Any
	37, // 5: recorder.Step.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 6: recorder.Step.actions:type_name -> recorder.StepAction
	17, // 7: recorder.Seat.cards:type_name -> recorder.Seat.CardsEntry
	18, // 8: recorder.Seat.scores:type_name -> recorder.Seat.ScoresEntry
	37, // 9: recorder.Result.timestamp:type_name -> google.protobuf.Timestamp
	19, // 10: recorder.Result.seats:type_name -> recorder.Result.SeatsEntry
	37, // 11: recorder.RoundRecord.ts_start:type_name -> google.protobuf.Timestamp
	20, // 12: recorder.RoundRecord.seats:type_name -> recorder.RoundRecord.SeatsEntry
	21, // 13: recorder.RoundRecord.players:type_name -> recorder.RoundRecord.PlayersEntry
	22, // 14: recorder.RoundRecord.tags:type_name -> recorder.RoundRecord.TagsEntry
	4,  // 15: recorder.RoundRecord.process:type_name -> recorder.Step
	6,  // 16: recorder.RoundRecord.results:type_name -> recorder.Result
	37, // 17: recorder.RoundRecord.ts_end:type_name -> google.protobuf.Timestamp
	23, // 18: recorder.RoundRecord.mideas:type_name -> recorder.RoundRecord.MideasEntry
	2,  // 19: recorder.Deck.cards:type_name -> recorder.CardList
	37, // 20: recorder.ShuffleRecord.ts_start:type_name -> google.protobuf.Timestamp
	37, // 21: recorder.ShuffleRecord.ts_end:type_name -> google.protobuf.Timestamp
	24, // 22: recorder.ShuffleRecord.decks:type_name -> recorder.ShuffleRecord.DecksEntry
	25, // 23: recorder.Bead.LuckCards:type_name -> recorder.Bead.LuckCardsEntry
	26, // 24: recorder.GameRoundInfo.luckCards:type_name -> recorder.GameRoundInfo.LuckCardsEntry
	11, // 25: recorder.RoadMap.beads:type_name -> recorder.Bead
	27, // 26: recorder.ShiftRecord.tags:type_name -> recorder.ShiftRecord.TagsEntry
	37, // 27: recorder.ShiftRecord.ts_start:type_name -> google.protobuf.Timestamp
	37, // 28: recorder.ShiftRecord.ts_end:type_name -> google.protobuf.Timestamp
	28, // 29: recorder.ShiftRecord.statistic:type_name -> recorder.ShiftRecord.StatisticEntry
	29, // 30: recorder.ShiftRecord.comboStatistic:type_name -> recorder.ShiftRecord.ComboStatisticEntry
	30, // 31: recorder.ShiftRecord.resultCount:type_name -> recorder.ShiftRecord.ResultCountEntry
	31, // 32: recorder.ShiftRecord.loShow:type_name -> recorder.ShiftRecord.LoShowEntry
	32, // 33: recorder.ShiftRecord.loNoShow:type_name -> recorder.ShiftRecord.LoNoShowEntry
	33, // 34: recorder.ShiftRecord.rcShow:type_name -> recorder.ShiftRecord.RcShowEntry
	34, // 35: recorder.ShiftRecord.rcNoShow:type_name -> recorder.ShiftRecord.RcNoShowEntry
	11, // 36: recorder.ShiftRecord.beads:type_name -> recorder.Bead
	12, // 37: recorder.ShiftRecord.info:type_name -> recorder.GameRoundInfo
	35, // 38: recorder.ShiftRecord.infoMap:type_name -> recorder.ShiftRecord.InfoMapEntry
	13, // 39: recorder.ShiftRecord.roadMap:type_name -> recorder.RoadMap
	2,  // 40: recorder.StepAction.CardsEntry.value:type_name -> recorder.CardList
	2,  // 41: recorder.Seat.CardsEntry.value:type_name -> recorder.CardList
	5,  // 42: recorder.Result.SeatsEntry.value:type_name -> recorder.Seat
	5,  // 43: recorder.RoundRecord.SeatsEntry.value:type_name -> recorder.Seat
	7,  // 44: recorder.RoundRecord.MideasEntry.value:type_name -> recorder.URLMedia
	9,  // 45: recorder.ShuffleRecord.DecksEntry.value:type_name -> recorder.Deck
	12, // 46: recorder.ShiftRecord.InfoMapEntry.value:type_name -> recorder.GameRoundInfo
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_recorder_record_proto_init() }
func file_recorder_record_proto_init() {
	if File_recorder_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recorder_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoadMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recorder_record_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recorder_record_proto_goTypes,
		DependencyIndexes: file_recorder_record_proto_depIdxs,
		EnumInfos:         file_recorder_record_proto_enumTypes,
		MessageInfos:      file_recorder_record_proto_msgTypes,
	}.Build()
	File_recorder_record_proto = out.File
	file_recorder_record_proto_rawDesc = nil
	file_recorder_record_proto_goTypes = nil
	file_recorder_record_proto_depIdxs = nil
}
