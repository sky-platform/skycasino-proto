// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: recorder/provider.proto

package recorder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查詢起時
	TsFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts_from,json=tsFrom,proto3" json:"ts_from,omitempty"`
	// 查詢終時
	TsTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts_to,json=tsTo,proto3" json:"ts_to,omitempty"`
	// 筆數
	Limit *int64 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// 頁面
	Page *int64 `protobuf:"varint,4,opt,name=page,proto3,oneof" json:"page,omitempty"`
}

func (x *RecordQuery) Reset() {
	*x = RecordQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordQuery) ProtoMessage() {}

func (x *RecordQuery) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordQuery.ProtoReflect.Descriptor instead.
func (*RecordQuery) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{0}
}

func (x *RecordQuery) GetTsFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TsFrom
	}
	return nil
}

func (x *RecordQuery) GetTsTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TsTo
	}
	return nil
}

func (x *RecordQuery) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *RecordQuery) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type FetchShiftRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	RecordId []byte `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// 遊戲類型
	GameType *string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3,oneof" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype *string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3,oneof" json:"game_subtype,omitempty"`
	// 遊戲代碼
	GameCode *string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3,oneof" json:"game_code,omitempty"`
	// 桌代碼
	TableCode *string `protobuf:"bytes,6,opt,name=table_code,json=tableCode,proto3,oneof" json:"table_code,omitempty"`
	// 允許的紀錄ID
	RecordIds [][]byte `protobuf:"bytes,9,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	// 允許的遊戲類型
	GameTypes []string `protobuf:"bytes,10,rep,name=game_types,json=gameTypes,proto3" json:"game_types,omitempty"`
	// 允許的遊戲子類型
	GameSubtypes []string `protobuf:"bytes,11,rep,name=game_subtypes,json=gameSubtypes,proto3" json:"game_subtypes,omitempty"`
	// 允許的遊戲代碼
	GameCodes []string `protobuf:"bytes,13,rep,name=game_codes,json=gameCodes,proto3" json:"game_codes,omitempty"`
	// 允許的桌代碼
	TableCodes []string `protobuf:"bytes,14,rep,name=table_codes,json=tableCodes,proto3" json:"table_codes,omitempty"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchShiftRecordRequest) Reset() {
	*x = FetchShiftRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShiftRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShiftRecordRequest) ProtoMessage() {}

func (x *FetchShiftRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShiftRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchShiftRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{1}
}

func (x *FetchShiftRecordRequest) GetRecordId() []byte {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetGameSubtype() string {
	if x != nil && x.GameSubtype != nil {
		return *x.GameSubtype
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetGameCode() string {
	if x != nil && x.GameCode != nil {
		return *x.GameCode
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetTableCode() string {
	if x != nil && x.TableCode != nil {
		return *x.TableCode
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetRecordIds() [][]byte {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetGameTypes() []string {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetGameSubtypes() []string {
	if x != nil {
		return x.GameSubtypes
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetGameCodes() []string {
	if x != nil {
		return x.GameCodes
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetTableCodes() []string {
	if x != nil {
		return x.TableCodes
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchShiftRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShiftRecord []*ShiftRecord `protobuf:"bytes,1,rep,name=shift_record,json=shiftRecord,proto3" json:"shift_record,omitempty"`
}

func (x *FetchShiftRecordResponse) Reset() {
	*x = FetchShiftRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShiftRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShiftRecordResponse) ProtoMessage() {}

func (x *FetchShiftRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShiftRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchShiftRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{2}
}

func (x *FetchShiftRecordResponse) GetShiftRecord() []*ShiftRecord {
	if x != nil {
		return x.ShiftRecord
	}
	return nil
}

type FetchShuffleRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	RecordId []byte `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// 遊戲類型
	GameType *string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3,oneof" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype *string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3,oneof" json:"game_subtype,omitempty"`
	// 遊戲代碼
	GameCode *string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3,oneof" json:"game_code,omitempty"`
	// 桌代碼
	TableCode *string `protobuf:"bytes,6,opt,name=table_code,json=tableCode,proto3,oneof" json:"table_code,omitempty"`
	// 班代碼
	ShiftCode *string `protobuf:"bytes,7,opt,name=shift_code,json=shiftCode,proto3,oneof" json:"shift_code,omitempty"`
	// 洗牌代碼
	ShuffleCode *string `protobuf:"bytes,8,opt,name=shuffle_code,json=shuffleCode,proto3,oneof" json:"shuffle_code,omitempty"`
	// 允許的紀錄ID
	RecordIds [][]byte `protobuf:"bytes,9,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	// 允許的遊戲類型
	GameTypes []string `protobuf:"bytes,10,rep,name=game_types,json=gameTypes,proto3" json:"game_types,omitempty"`
	// 允許的遊戲子類型
	GameSubtypes []string `protobuf:"bytes,11,rep,name=game_subtypes,json=gameSubtypes,proto3" json:"game_subtypes,omitempty"`
	// 允許的遊戲代碼
	GameCodes []string `protobuf:"bytes,13,rep,name=game_codes,json=gameCodes,proto3" json:"game_codes,omitempty"`
	// 允許的桌代碼
	TableCodes []string `protobuf:"bytes,14,rep,name=table_codes,json=tableCodes,proto3" json:"table_codes,omitempty"`
	// 允許的班代碼
	ShiftCodes []string `protobuf:"bytes,15,rep,name=shift_codes,json=shiftCodes,proto3" json:"shift_codes,omitempty"`
	// 允許的洗牌代碼
	ShuffleCodes []string `protobuf:"bytes,16,rep,name=shuffle_codes,json=shuffleCodes,proto3" json:"shuffle_codes,omitempty"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchShuffleRecordRequest) Reset() {
	*x = FetchShuffleRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShuffleRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShuffleRecordRequest) ProtoMessage() {}

func (x *FetchShuffleRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShuffleRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchShuffleRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{3}
}

func (x *FetchShuffleRecordRequest) GetRecordId() []byte {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetGameSubtype() string {
	if x != nil && x.GameSubtype != nil {
		return *x.GameSubtype
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetGameCode() string {
	if x != nil && x.GameCode != nil {
		return *x.GameCode
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetTableCode() string {
	if x != nil && x.TableCode != nil {
		return *x.TableCode
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetShiftCode() string {
	if x != nil && x.ShiftCode != nil {
		return *x.ShiftCode
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetShuffleCode() string {
	if x != nil && x.ShuffleCode != nil {
		return *x.ShuffleCode
	}
	return ""
}

func (x *FetchShuffleRecordRequest) GetRecordIds() [][]byte {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetGameTypes() []string {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetGameSubtypes() []string {
	if x != nil {
		return x.GameSubtypes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetGameCodes() []string {
	if x != nil {
		return x.GameCodes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetTableCodes() []string {
	if x != nil {
		return x.TableCodes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetShiftCodes() []string {
	if x != nil {
		return x.ShiftCodes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetShuffleCodes() []string {
	if x != nil {
		return x.ShuffleCodes
	}
	return nil
}

func (x *FetchShuffleRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchShuffleRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffleRecord []*ShuffleRecord `protobuf:"bytes,1,rep,name=shuffle_record,json=shuffleRecord,proto3" json:"shuffle_record,omitempty"`
}

func (x *FetchShuffleRecordResponse) Reset() {
	*x = FetchShuffleRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShuffleRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShuffleRecordResponse) ProtoMessage() {}

func (x *FetchShuffleRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShuffleRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchShuffleRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{4}
}

func (x *FetchShuffleRecordResponse) GetShuffleRecord() []*ShuffleRecord {
	if x != nil {
		return x.ShuffleRecord
	}
	return nil
}

type FetchRoundRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	RecordId []byte `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// 遊戲類型
	GameType *string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3,oneof" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype *string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3,oneof" json:"game_subtype,omitempty"`
	// 遊戲代碼
	GameCode *string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3,oneof" json:"game_code,omitempty"`
	// 桌代碼
	TableCode *string `protobuf:"bytes,6,opt,name=table_code,json=tableCode,proto3,oneof" json:"table_code,omitempty"`
	// 班代碼
	ShiftCode *string `protobuf:"bytes,7,opt,name=shift_code,json=shiftCode,proto3,oneof" json:"shift_code,omitempty"`
	// 局代碼
	RoundCode *string `protobuf:"bytes,8,opt,name=round_code,json=roundCode,proto3,oneof" json:"round_code,omitempty"`
	// 允許的紀錄ID
	RecordIds [][]byte `protobuf:"bytes,9,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
	// 允許的遊戲類型
	GameTypes []string `protobuf:"bytes,10,rep,name=game_types,json=gameTypes,proto3" json:"game_types,omitempty"`
	// 允許的遊戲子類型
	GameSubtypes []string `protobuf:"bytes,11,rep,name=game_subtypes,json=gameSubtypes,proto3" json:"game_subtypes,omitempty"`
	// 允許的遊戲代碼
	GameCodes []string `protobuf:"bytes,13,rep,name=game_codes,json=gameCodes,proto3" json:"game_codes,omitempty"`
	// 允許的桌代碼
	TableCodes []string `protobuf:"bytes,14,rep,name=table_codes,json=tableCodes,proto3" json:"table_codes,omitempty"`
	// 允許的班代碼
	ShiftCodes []string `protobuf:"bytes,15,rep,name=shift_codes,json=shiftCodes,proto3" json:"shift_codes,omitempty"`
	// 允許的局代碼
	RoundCodes []string `protobuf:"bytes,16,rep,name=round_codes,json=roundCodes,proto3" json:"round_codes,omitempty"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchRoundRecordRequest) Reset() {
	*x = FetchRoundRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRoundRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRoundRecordRequest) ProtoMessage() {}

func (x *FetchRoundRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRoundRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchRoundRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{5}
}

func (x *FetchRoundRecordRequest) GetRecordId() []byte {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetGameSubtype() string {
	if x != nil && x.GameSubtype != nil {
		return *x.GameSubtype
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetGameCode() string {
	if x != nil && x.GameCode != nil {
		return *x.GameCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetTableCode() string {
	if x != nil && x.TableCode != nil {
		return *x.TableCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetShiftCode() string {
	if x != nil && x.ShiftCode != nil {
		return *x.ShiftCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetRoundCode() string {
	if x != nil && x.RoundCode != nil {
		return *x.RoundCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetRecordIds() [][]byte {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetGameTypes() []string {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetGameSubtypes() []string {
	if x != nil {
		return x.GameSubtypes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetGameCodes() []string {
	if x != nil {
		return x.GameCodes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetTableCodes() []string {
	if x != nil {
		return x.TableCodes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetShiftCodes() []string {
	if x != nil {
		return x.ShiftCodes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetRoundCodes() []string {
	if x != nil {
		return x.RoundCodes
	}
	return nil
}

func (x *FetchRoundRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchRoundRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundRecord []*RoundRecord `protobuf:"bytes,1,rep,name=round_record,json=roundRecord,proto3" json:"round_record,omitempty"`
}

func (x *FetchRoundRecordResponse) Reset() {
	*x = FetchRoundRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRoundRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRoundRecordResponse) ProtoMessage() {}

func (x *FetchRoundRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRoundRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchRoundRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{6}
}

func (x *FetchRoundRecordResponse) GetRoundRecord() []*RoundRecord {
	if x != nil {
		return x.RoundRecord
	}
	return nil
}

// 遊戲供應
type GameProvide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲類型
	GameType string `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,3,opt,name=game_subtype,json=gameSubtype,proto3" json:"game_subtype,omitempty"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,4,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 維護中
	Maintenance bool `protobuf:"varint,7,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
}

func (x *GameProvide) Reset() {
	*x = GameProvide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameProvide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameProvide) ProtoMessage() {}

func (x *GameProvide) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameProvide.ProtoReflect.Descriptor instead.
func (*GameProvide) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{7}
}

func (x *GameProvide) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *GameProvide) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *GameProvide) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *GameProvide) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GameProvide) GetMaintenance() bool {
	if x != nil {
		return x.Maintenance
	}
	return false
}

type FetchGameProvideListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌列表
	GameProvides []*GameProvide `protobuf:"bytes,1,rep,name=game_provides,json=gameProvides,proto3" json:"game_provides,omitempty"`
}

func (x *FetchGameProvideListResponse) Reset() {
	*x = FetchGameProvideListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGameProvideListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGameProvideListResponse) ProtoMessage() {}

func (x *FetchGameProvideListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGameProvideListResponse.ProtoReflect.Descriptor instead.
func (*FetchGameProvideListResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{8}
}

func (x *FetchGameProvideListResponse) GetGameProvides() []*GameProvide {
	if x != nil {
		return x.GameProvides
	}
	return nil
}

type CurrentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,5,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 班
	Shift *ShiftRecord `protobuf:"bytes,7,opt,name=shift,proto3,oneof" json:"shift,omitempty"`
	// 遊戲局
	Round *RoundRecord `protobuf:"bytes,9,opt,name=round,proto3,oneof" json:"round,omitempty"`
	// 洗牌
	Shuffle *ShuffleRecord `protobuf:"bytes,10,opt,name=shuffle,proto3,oneof" json:"shuffle,omitempty"`
	// 附加媒體
	MapMideas map[string]*URLMedia `protobuf:"bytes,24,rep,name=map_mideas,json=mapMideas,proto3" json:"map_mideas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CurrentGame) Reset() {
	*x = CurrentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentGame) ProtoMessage() {}

func (x *CurrentGame) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentGame.ProtoReflect.Descriptor instead.
func (*CurrentGame) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{9}
}

func (x *CurrentGame) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *CurrentGame) GetShift() *ShiftRecord {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *CurrentGame) GetRound() *RoundRecord {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *CurrentGame) GetShuffle() *ShuffleRecord {
	if x != nil {
		return x.Shuffle
	}
	return nil
}

func (x *CurrentGame) GetMapMideas() map[string]*URLMedia {
	if x != nil {
		return x.MapMideas
	}
	return nil
}

type FetchCurrentGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查詢的Table Code
	GameCodes []string `protobuf:"bytes,1,rep,name=game_codes,json=gameCodes,proto3" json:"game_codes,omitempty"`
	// 返回Shift資訊
	Shift bool `protobuf:"varint,7,opt,name=shift,proto3" json:"shift,omitempty"`
	// 返回Shuffle資訊
	Shuffle bool `protobuf:"varint,10,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	// 返回直播網址
	Stream bool `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *FetchCurrentGameRequest) Reset() {
	*x = FetchCurrentGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCurrentGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCurrentGameRequest) ProtoMessage() {}

func (x *FetchCurrentGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCurrentGameRequest.ProtoReflect.Descriptor instead.
func (*FetchCurrentGameRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{10}
}

func (x *FetchCurrentGameRequest) GetGameCodes() []string {
	if x != nil {
		return x.GameCodes
	}
	return nil
}

func (x *FetchCurrentGameRequest) GetShift() bool {
	if x != nil {
		return x.Shift
	}
	return false
}

func (x *FetchCurrentGameRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *FetchCurrentGameRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type FetchCurrentGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table Code 對應的當下 Current Table
	MapCurrentGames map[string]*CurrentGame `protobuf:"bytes,1,rep,name=map_current_games,json=mapCurrentGames,proto3" json:"map_current_games,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 時間戳
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *FetchCurrentGameResponse) Reset() {
	*x = FetchCurrentGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCurrentGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCurrentGameResponse) ProtoMessage() {}

func (x *FetchCurrentGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCurrentGameResponse.ProtoReflect.Descriptor instead.
func (*FetchCurrentGameResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{11}
}

func (x *FetchCurrentGameResponse) GetMapCurrentGames() map[string]*CurrentGame {
	if x != nil {
		return x.MapCurrentGames
	}
	return nil
}

func (x *FetchCurrentGameResponse) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

var File_recorder_provider_proto protoreflect.FileDescriptor

var file_recorder_provider_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2f, 0x0a,
	0x05, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x73, 0x54, 0x6f, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x99, 0x05, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x5c, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x8d, 0x05,
	0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5a, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x22, 0xfd, 0x02, 0x0a,
	0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x48, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x02, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x69, 0x64,
	0x65, 0x61, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x69, 0x64, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x61, 0x70, 0x4d, 0x69, 0x64, 0x65, 0x61, 0x73, 0x1a, 0x50, 0x0a, 0x0e, 0x4d, 0x61,
	0x70, 0x4d, 0x69, 0x64, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x52, 0x4c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22,
	0x86, 0x02, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x6d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x1a, 0x59, 0x0a,
	0x14, 0x4d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xac, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc4, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x94,
	0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73,
	0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x08,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xca, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0xe2, 0x02, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recorder_provider_proto_rawDescOnce sync.Once
	file_recorder_provider_proto_rawDescData = file_recorder_provider_proto_rawDesc
)

func file_recorder_provider_proto_rawDescGZIP() []byte {
	file_recorder_provider_proto_rawDescOnce.Do(func() {
		file_recorder_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_provider_proto_rawDescData)
	})
	return file_recorder_provider_proto_rawDescData
}

var file_recorder_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_recorder_provider_proto_goTypes = []interface{}{
	(*RecordQuery)(nil),                  // 0: recorder.RecordQuery
	(*FetchShiftRecordRequest)(nil),      // 1: recorder.FetchShiftRecordRequest
	(*FetchShiftRecordResponse)(nil),     // 2: recorder.FetchShiftRecordResponse
	(*FetchShuffleRecordRequest)(nil),    // 3: recorder.FetchShuffleRecordRequest
	(*FetchShuffleRecordResponse)(nil),   // 4: recorder.FetchShuffleRecordResponse
	(*FetchRoundRecordRequest)(nil),      // 5: recorder.FetchRoundRecordRequest
	(*FetchRoundRecordResponse)(nil),     // 6: recorder.FetchRoundRecordResponse
	(*GameProvide)(nil),                  // 7: recorder.GameProvide
	(*FetchGameProvideListResponse)(nil), // 8: recorder.FetchGameProvideListResponse
	(*CurrentGame)(nil),                  // 9: recorder.CurrentGame
	(*FetchCurrentGameRequest)(nil),      // 10: recorder.FetchCurrentGameRequest
	(*FetchCurrentGameResponse)(nil),     // 11: recorder.FetchCurrentGameResponse
	nil,                                  // 12: recorder.GameProvide.TagsEntry
	nil,                                  // 13: recorder.CurrentGame.MapMideasEntry
	nil,                                  // 14: recorder.FetchCurrentGameResponse.MapCurrentGamesEntry
	(*timestamppb.Timestamp)(nil),        // 15: google.protobuf.Timestamp
	(*ShiftRecord)(nil),                  // 16: recorder.ShiftRecord
	(*ShuffleRecord)(nil),                // 17: recorder.ShuffleRecord
	(*RoundRecord)(nil),                  // 18: recorder.RoundRecord
	(*URLMedia)(nil),                     // 19: recorder.URLMedia
	(*emptypb.Empty)(nil),                // 20: google.protobuf.Empty
}
var file_recorder_provider_proto_depIdxs = []int32{
	15, // 0: recorder.RecordQuery.ts_from:type_name -> google.protobuf.Timestamp
	15, // 1: recorder.RecordQuery.ts_to:type_name -> google.protobuf.Timestamp
	0,  // 2: recorder.FetchShiftRecordRequest.query:type_name -> recorder.RecordQuery
	16, // 3: recorder.FetchShiftRecordResponse.shift_record:type_name -> recorder.ShiftRecord
	0,  // 4: recorder.FetchShuffleRecordRequest.query:type_name -> recorder.RecordQuery
	17, // 5: recorder.FetchShuffleRecordResponse.shuffle_record:type_name -> recorder.ShuffleRecord
	0,  // 6: recorder.FetchRoundRecordRequest.query:type_name -> recorder.RecordQuery
	18, // 7: recorder.FetchRoundRecordResponse.round_record:type_name -> recorder.RoundRecord
	12, // 8: recorder.GameProvide.tags:type_name -> recorder.GameProvide.TagsEntry
	7,  // 9: recorder.FetchGameProvideListResponse.game_provides:type_name -> recorder.GameProvide
	16, // 10: recorder.CurrentGame.shift:type_name -> recorder.ShiftRecord
	18, // 11: recorder.CurrentGame.round:type_name -> recorder.RoundRecord
	17, // 12: recorder.CurrentGame.shuffle:type_name -> recorder.ShuffleRecord
	13, // 13: recorder.CurrentGame.map_mideas:type_name -> recorder.CurrentGame.MapMideasEntry
	14, // 14: recorder.FetchCurrentGameResponse.map_current_games:type_name -> recorder.FetchCurrentGameResponse.MapCurrentGamesEntry
	15, // 15: recorder.FetchCurrentGameResponse.ts:type_name -> google.protobuf.Timestamp
	19, // 16: recorder.CurrentGame.MapMideasEntry.value:type_name -> recorder.URLMedia
	9,  // 17: recorder.FetchCurrentGameResponse.MapCurrentGamesEntry.value:type_name -> recorder.CurrentGame
	1,  // 18: recorder.RecorderReadService.FetchShiftRecord:input_type -> recorder.FetchShiftRecordRequest
	3,  // 19: recorder.RecorderReadService.FetchShuffleRecord:input_type -> recorder.FetchShuffleRecordRequest
	5,  // 20: recorder.RecorderReadService.FetchRoundRecord:input_type -> recorder.FetchRoundRecordRequest
	20, // 21: recorder.ProviderService.FetchGameProvideList:input_type -> google.protobuf.Empty
	10, // 22: recorder.ProviderService.FetchCurrentGame:input_type -> recorder.FetchCurrentGameRequest
	2,  // 23: recorder.RecorderReadService.FetchShiftRecord:output_type -> recorder.FetchShiftRecordResponse
	4,  // 24: recorder.RecorderReadService.FetchShuffleRecord:output_type -> recorder.FetchShuffleRecordResponse
	6,  // 25: recorder.RecorderReadService.FetchRoundRecord:output_type -> recorder.FetchRoundRecordResponse
	8,  // 26: recorder.ProviderService.FetchGameProvideList:output_type -> recorder.FetchGameProvideListResponse
	11, // 27: recorder.ProviderService.FetchCurrentGame:output_type -> recorder.FetchCurrentGameResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_recorder_provider_proto_init() }
func file_recorder_provider_proto_init() {
	if File_recorder_provider_proto != nil {
		return
	}
	file_recorder_record_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recorder_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShiftRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShiftRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShuffleRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShuffleRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRoundRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRoundRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameProvide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGameProvideListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCurrentGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCurrentGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recorder_provider_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_provider_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_recorder_provider_proto_goTypes,
		DependencyIndexes: file_recorder_provider_proto_depIdxs,
		MessageInfos:      file_recorder_provider_proto_msgTypes,
	}.Build()
	File_recorder_provider_proto = out.File
	file_recorder_provider_proto_rawDesc = nil
	file_recorder_provider_proto_goTypes = nil
	file_recorder_provider_proto_depIdxs = nil
}
