// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: games/thebigbattle/record.proto

package thebigbattle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceType int32

const (
	// 未指定
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// 牌靴
	ResourceType_SHOE ResourceType = 1
	// 例牌
	ResourceType_NORMAL ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "SHOE",
		2: "NORMAL",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"SHOE":                      1,
		"NORMAL":                    2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{0}
}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
type Step int32

const (
	// 未指定
	Step_STEP_UNSPECIFIED Step = 0
	// 本局開始
	Step_ROUND_START Step = 1
	// 本局完成
	Step_ROUND_FINISHED Step = 2
	// 本局取消
	Step_ROUND_CANCELED Step = 3
	// 捨牌1
	Step_DEAL_DISCARD_1 Step = 4
	// 派發龍例牌
	Step_DEAL_DRAGON_1 Step = 5
	// 派發虎例牌
	Step_DEAL_TIGER_1 Step = 6
	// 開放下注
	Step_OPEN_FOR_BETTING Step = 9
	// 停止下注
	Step_CLOSE_THE_BETTING Step = 10
	// 開例牌
	Step_SHOW_NORMAL Step = 12
	// PITBOSS 修改派發例牌
	Step_PITBOSS_MODIFY_NORMAL Step = 24
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0:  "STEP_UNSPECIFIED",
		1:  "ROUND_START",
		2:  "ROUND_FINISHED",
		3:  "ROUND_CANCELED",
		4:  "DEAL_DISCARD_1",
		5:  "DEAL_DRAGON_1",
		6:  "DEAL_TIGER_1",
		9:  "OPEN_FOR_BETTING",
		10: "CLOSE_THE_BETTING",
		12: "SHOW_NORMAL",
		24: "PITBOSS_MODIFY_NORMAL",
	}
	Step_value = map[string]int32{
		"STEP_UNSPECIFIED":      0,
		"ROUND_START":           1,
		"ROUND_FINISHED":        2,
		"ROUND_CANCELED":        3,
		"DEAL_DISCARD_1":        4,
		"DEAL_DRAGON_1":         5,
		"DEAL_TIGER_1":          6,
		"OPEN_FOR_BETTING":      9,
		"CLOSE_THE_BETTING":     10,
		"SHOW_NORMAL":           12,
		"PITBOSS_MODIFY_NORMAL": 24,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[1].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[1]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{1}
}

// 座位功能代碼
type Seat int32

const (
	// 未指定
	Seat_SEAT_UNSPECIFIED Seat = 0
	// 龍
	Seat_DRAGON Seat = 1
	// 虎
	Seat_TIGER Seat = 2
	// Dealer
	Seat_DEALER Seat = 3
	// Discard
	Seat_DISCARD Seat = 4
	// Pitboss
	Seat_PITBOSS Seat = 9
)

// Enum value maps for Seat.
var (
	Seat_name = map[int32]string{
		0: "SEAT_UNSPECIFIED",
		1: "DRAGON",
		2: "TIGER",
		3: "DEALER",
		4: "DISCARD",
		9: "PITBOSS",
	}
	Seat_value = map[string]int32{
		"SEAT_UNSPECIFIED": 0,
		"DRAGON":           1,
		"TIGER":            2,
		"DEALER":           3,
		"DISCARD":          4,
		"PITBOSS":          9,
	}
)

func (x Seat) Enum() *Seat {
	p := new(Seat)
	*p = x
	return p
}

func (x Seat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Seat) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[2].Descriptor()
}

func (Seat) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[2]
}

func (x Seat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Seat.Descriptor instead.
func (Seat) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{2}
}

// 結果紀錄類型代碼
type ResultRecordType int32

const (
	// 未指定
	ResultRecordType_RESULT_RECORD_TYPE_UNSPECIFIED ResultRecordType = 0
	// 遊戲局結束
	ResultRecordType_ROUND_FINISH ResultRecordType = 1
	// Pitboss 修正
	ResultRecordType_PITBOSS_MODIFY_RESULT ResultRecordType = 2
)

// Enum value maps for ResultRecordType.
var (
	ResultRecordType_name = map[int32]string{
		0: "RESULT_RECORD_TYPE_UNSPECIFIED",
		1: "ROUND_FINISH",
		2: "PITBOSS_MODIFY_RESULT",
	}
	ResultRecordType_value = map[string]int32{
		"RESULT_RECORD_TYPE_UNSPECIFIED": 0,
		"ROUND_FINISH":                   1,
		"PITBOSS_MODIFY_RESULT":          2,
	}
)

func (x ResultRecordType) Enum() *ResultRecordType {
	p := new(ResultRecordType)
	*p = x
	return p
}

func (x ResultRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[3].Descriptor()
}

func (ResultRecordType) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[3]
}

func (x ResultRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultRecordType.Descriptor instead.
func (ResultRecordType) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{3}
}

// 取消原因
type CancelReason int32

const (
	// 未指定，沒有取消
	CancelReason_CANCEL_REASON_UNSPECIFIED CancelReason = 0
	// 取消說明原因
	CancelReason_NO_REASON CancelReason = 1
)

// Enum value maps for CancelReason.
var (
	CancelReason_name = map[int32]string{
		0: "CANCEL_REASON_UNSPECIFIED",
		1: "NO_REASON",
	}
	CancelReason_value = map[string]int32{
		"CANCEL_REASON_UNSPECIFIED": 0,
		"NO_REASON":                 1,
	}
)

func (x CancelReason) Enum() *CancelReason {
	p := new(CancelReason)
	*p = x
	return p
}

func (x CancelReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReason) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[4].Descriptor()
}

func (CancelReason) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[4]
}

func (x CancelReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReason.Descriptor instead.
func (CancelReason) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{4}
}

// *
// The state of the game flow
type GameState int32

const (
	GameState_STATE_IDLE          GameState = 0  // Idle
	GameState_STATE_START         GameState = 1  // Game Starting
	GameState_STATE_COUNTER_START GameState = 2  // Counuter Started
	GameState_STATE_DRAGON        GameState = 3  // Scan the dragon card
	GameState_STATE_TIGER         GameState = 4  // Scan the tiger card
	GameState_STATE_END           GameState = 7  // Game Ended
	GameState_STATE_CONFIRM       GameState = 8  // Wait for confirm
	GameState_STATE_DISCARD       GameState = 9  // Scane the discard
	GameState_STATE_SHUFFLE       GameState = 30 // Shuffle cards
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "STATE_IDLE",
		1:  "STATE_START",
		2:  "STATE_COUNTER_START",
		3:  "STATE_DRAGON",
		4:  "STATE_TIGER",
		7:  "STATE_END",
		8:  "STATE_CONFIRM",
		9:  "STATE_DISCARD",
		30: "STATE_SHUFFLE",
	}
	GameState_value = map[string]int32{
		"STATE_IDLE":          0,
		"STATE_START":         1,
		"STATE_COUNTER_START": 2,
		"STATE_DRAGON":        3,
		"STATE_TIGER":         4,
		"STATE_END":           7,
		"STATE_CONFIRM":       8,
		"STATE_DISCARD":       9,
		"STATE_SHUFFLE":       30,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[5].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[5]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{5}
}

type WinType int32

const (
	WinType_NULL       WinType = 0
	WinType_WIN_DRAGON WinType = 1
	WinType_WIN_TIGER  WinType = 2
	WinType_WIN_TIE    WinType = 3
)

// Enum value maps for WinType.
var (
	WinType_name = map[int32]string{
		0: "NULL",
		1: "WIN_DRAGON",
		2: "WIN_TIGER",
		3: "WIN_TIE",
	}
	WinType_value = map[string]int32{
		"NULL":       0,
		"WIN_DRAGON": 1,
		"WIN_TIGER":  2,
		"WIN_TIE":    3,
	}
)

func (x WinType) Enum() *WinType {
	p := new(WinType)
	*p = x
	return p
}

func (x WinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinType) Descriptor() protoreflect.EnumDescriptor {
	return file_games_thebigbattle_record_proto_enumTypes[6].Descriptor()
}

func (WinType) Type() protoreflect.EnumType {
	return &file_games_thebigbattle_record_proto_enumTypes[6]
}

func (x WinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinType.Descriptor instead.
func (WinType) EnumDescriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{6}
}

// *
// The status fo the current game.
type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID   string    `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`                            // Unique tableid
	GameRoundID string    `protobuf:"bytes,2,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`                        // Unique session for the game
	TableID     string    `protobuf:"bytes,3,opt,name=tableID,proto3" json:"tableID,omitempty"`                                // Unique tableid
	State       GameState `protobuf:"varint,4,opt,name=state,proto3,enum=games.thebigbattle.GameState" json:"state,omitempty"` // State of the game
	StartTime   int64     `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`                           // Time when game start
	ShoeID      string    `protobuf:"bytes,6,opt,name=shoeID,proto3" json:"shoeID,omitempty"`                                  // Shoe ID
	Shoe        int32     `protobuf:"varint,7,opt,name=shoe,proto3" json:"shoe,omitempty"`
	Round       int32     `protobuf:"varint,8,opt,name=round,proto3" json:"round,omitempty"`
	// game specify information
	DragonCard       string           `protobuf:"bytes,10,opt,name=dragonCard,proto3" json:"dragonCard,omitempty"`                                                                                             // Card slot Dragon
	TigerCard        string           `protobuf:"bytes,11,opt,name=tigerCard,proto3" json:"tigerCard,omitempty"`                                                                                               // Card slot Tiger
	DragonBarcode    string           `protobuf:"bytes,12,opt,name=dragonBarcode,proto3" json:"dragonBarcode,omitempty"`                                                                                       //  Dragon Barcode
	TigerBarcode     string           `protobuf:"bytes,13,opt,name=tigerBarcode,proto3" json:"tigerBarcode,omitempty"`                                                                                         //  Tiger Barcode
	DragonPoint      int32            `protobuf:"varint,20,opt,name=dragonPoint,proto3" json:"dragonPoint,omitempty"`                                                                                          // Dragon Point
	TigerPoint       int32            `protobuf:"varint,21,opt,name=tigerPoint,proto3" json:"tigerPoint,omitempty"`                                                                                            // Tiger Point
	Countdown        int32            `protobuf:"varint,30,opt,name=countdown,proto3" json:"countdown,omitempty"`                                                                                              // Coundown value
	WinType          WinType          `protobuf:"varint,31,opt,name=winType,proto3,enum=games.thebigbattle.WinType" json:"winType,omitempty"`                                                                  // Wintype
	Redcard          bool             `protobuf:"varint,90,opt,name=redcard,proto3" json:"redcard,omitempty"`                                                                                                  // If redcard scan
	MaskedCardsSN    []string         `protobuf:"bytes,103,rep,name=maskedCardsSN,proto3" json:"maskedCardsSN,omitempty"`                                                                                      // masked cards sn slice for blockchan
	HashedCards      []string         `protobuf:"bytes,104,rep,name=hashedCards,proto3" json:"hashedCards,omitempty"`                                                                                          // sha256 cards from masked cards sn
	ShowFirstCard    bool             `protobuf:"varint,105,opt,name=showFirstCard,proto3" json:"showFirstCard,omitempty"`                                                                                     // show first card boolean when new shoe
	FirstCard        string           `protobuf:"bytes,106,opt,name=firstCard,proto3" json:"firstCard,omitempty"`                                                                                              // first card of the shoe
	CurrentCardIndex int32            `protobuf:"varint,107,opt,name=currentCardIndex,proto3" json:"currentCardIndex,omitempty"`                                                                               // next card to show (i.e. first maskedCardsSN haven't been shown's index)
	RedCardIndex     int32            `protobuf:"varint,108,opt,name=redCardIndex,proto3" json:"redCardIndex,omitempty"`                                                                                       // the red card index of the shoe
	CosmosShoeID     string           `protobuf:"bytes,109,opt,name=cosmosShoeID,proto3" json:"cosmosShoeID,omitempty"`                                                                                        // cosmos blockchain id for the shoe
	HashedLength     int32            `protobuf:"varint,110,opt,name=hashedLength,proto3" json:"hashedLength,omitempty"`                                                                                       // length of hashedCards
	ScannerType      map[string]int32 `protobuf:"bytes,112,rep,name=scannerType,proto3" json:"scannerType,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 0: barcode 1:image recognition
	Lucky            map[string]int32 `protobuf:"bytes,150,rep,name=lucky,proto3" json:"lucky,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`             // Lucky Number and payout ratio
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_thebigbattle_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_games_thebigbattle_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_games_thebigbattle_record_proto_rawDescGZIP(), []int{0}
}

func (x *GameStatus) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *GameStatus) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *GameStatus) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *GameStatus) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_STATE_IDLE
}

func (x *GameStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GameStatus) GetShoeID() string {
	if x != nil {
		return x.ShoeID
	}
	return ""
}

func (x *GameStatus) GetShoe() int32 {
	if x != nil {
		return x.Shoe
	}
	return 0
}

func (x *GameStatus) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GameStatus) GetDragonCard() string {
	if x != nil {
		return x.DragonCard
	}
	return ""
}

func (x *GameStatus) GetTigerCard() string {
	if x != nil {
		return x.TigerCard
	}
	return ""
}

func (x *GameStatus) GetDragonBarcode() string {
	if x != nil {
		return x.DragonBarcode
	}
	return ""
}

func (x *GameStatus) GetTigerBarcode() string {
	if x != nil {
		return x.TigerBarcode
	}
	return ""
}

func (x *GameStatus) GetDragonPoint() int32 {
	if x != nil {
		return x.DragonPoint
	}
	return 0
}

func (x *GameStatus) GetTigerPoint() int32 {
	if x != nil {
		return x.TigerPoint
	}
	return 0
}

func (x *GameStatus) GetCountdown() int32 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *GameStatus) GetWinType() WinType {
	if x != nil {
		return x.WinType
	}
	return WinType_NULL
}

func (x *GameStatus) GetRedcard() bool {
	if x != nil {
		return x.Redcard
	}
	return false
}

func (x *GameStatus) GetMaskedCardsSN() []string {
	if x != nil {
		return x.MaskedCardsSN
	}
	return nil
}

func (x *GameStatus) GetHashedCards() []string {
	if x != nil {
		return x.HashedCards
	}
	return nil
}

func (x *GameStatus) GetShowFirstCard() bool {
	if x != nil {
		return x.ShowFirstCard
	}
	return false
}

func (x *GameStatus) GetFirstCard() string {
	if x != nil {
		return x.FirstCard
	}
	return ""
}

func (x *GameStatus) GetCurrentCardIndex() int32 {
	if x != nil {
		return x.CurrentCardIndex
	}
	return 0
}

func (x *GameStatus) GetRedCardIndex() int32 {
	if x != nil {
		return x.RedCardIndex
	}
	return 0
}

func (x *GameStatus) GetCosmosShoeID() string {
	if x != nil {
		return x.CosmosShoeID
	}
	return ""
}

func (x *GameStatus) GetHashedLength() int32 {
	if x != nil {
		return x.HashedLength
	}
	return 0
}

func (x *GameStatus) GetScannerType() map[string]int32 {
	if x != nil {
		return x.ScannerType
	}
	return nil
}

func (x *GameStatus) GetLucky() map[string]int32 {
	if x != nil {
		return x.Lucky
	}
	return nil
}

var File_games_thebigbattle_record_proto protoreflect.FileDescriptor

var file_games_thebigbattle_record_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x74, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x22, 0xe7, 0x08, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x67, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x67, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x67, 0x65, 0x72,
	0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x69, 0x67, 0x65, 0x72, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x77,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x4e, 0x18, 0x67, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x53, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f,
	0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x53, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x68, 0x6f, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x51, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74, 0x68,
	0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x18, 0x96, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74, 0x68, 0x65, 0x62,
	0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6c, 0x75, 0x63, 0x6b, 0x79, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x48, 0x4f, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x02, 0x2a, 0xe7, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x31, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f,
	0x31, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x47, 0x45,
	0x52, 0x5f, 0x31, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x18, 0x2a, 0x59,
	0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x47, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x09, 0x2a, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a, 0x3c,
	0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0xb0, 0x01, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x52,
	0x41, 0x47, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x49, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x1e, 0x2a,
	0x3f, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x47, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x45, 0x10, 0x03,
	0x42, 0xcf, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x74,
	0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x74,
	0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0xa2, 0x02, 0x03, 0x47, 0x54,
	0x58, 0xaa, 0x02, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x62, 0x69, 0x67,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0xca, 0x02, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5c, 0x54,
	0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0xe2, 0x02, 0x1e, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x5c, 0x54, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x3a, 0x3a, 0x54, 0x68, 0x65, 0x62, 0x69, 0x67, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_games_thebigbattle_record_proto_rawDescOnce sync.Once
	file_games_thebigbattle_record_proto_rawDescData = file_games_thebigbattle_record_proto_rawDesc
)

func file_games_thebigbattle_record_proto_rawDescGZIP() []byte {
	file_games_thebigbattle_record_proto_rawDescOnce.Do(func() {
		file_games_thebigbattle_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_games_thebigbattle_record_proto_rawDescData)
	})
	return file_games_thebigbattle_record_proto_rawDescData
}

var file_games_thebigbattle_record_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_games_thebigbattle_record_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_games_thebigbattle_record_proto_goTypes = []interface{}{
	(ResourceType)(0),     // 0: games.thebigbattle.ResourceType
	(Step)(0),             // 1: games.thebigbattle.Step
	(Seat)(0),             // 2: games.thebigbattle.Seat
	(ResultRecordType)(0), // 3: games.thebigbattle.ResultRecordType
	(CancelReason)(0),     // 4: games.thebigbattle.CancelReason
	(GameState)(0),        // 5: games.thebigbattle.GameState
	(WinType)(0),          // 6: games.thebigbattle.WinType
	(*GameStatus)(nil),    // 7: games.thebigbattle.GameStatus
	nil,                   // 8: games.thebigbattle.GameStatus.ScannerTypeEntry
	nil,                   // 9: games.thebigbattle.GameStatus.LuckyEntry
}
var file_games_thebigbattle_record_proto_depIdxs = []int32{
	5, // 0: games.thebigbattle.GameStatus.state:type_name -> games.thebigbattle.GameState
	6, // 1: games.thebigbattle.GameStatus.winType:type_name -> games.thebigbattle.WinType
	8, // 2: games.thebigbattle.GameStatus.scannerType:type_name -> games.thebigbattle.GameStatus.ScannerTypeEntry
	9, // 3: games.thebigbattle.GameStatus.lucky:type_name -> games.thebigbattle.GameStatus.LuckyEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_games_thebigbattle_record_proto_init() }
func file_games_thebigbattle_record_proto_init() {
	if File_games_thebigbattle_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_games_thebigbattle_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_games_thebigbattle_record_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_games_thebigbattle_record_proto_goTypes,
		DependencyIndexes: file_games_thebigbattle_record_proto_depIdxs,
		EnumInfos:         file_games_thebigbattle_record_proto_enumTypes,
		MessageInfos:      file_games_thebigbattle_record_proto_msgTypes,
	}.Build()
	File_games_thebigbattle_record_proto = out.File
	file_games_thebigbattle_record_proto_rawDesc = nil
	file_games_thebigbattle_record_proto_goTypes = nil
	file_games_thebigbattle_record_proto_depIdxs = nil
}
