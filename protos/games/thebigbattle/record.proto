syntax = "proto3";
package games.thebigbattle;

enum ResourceType {

  // 未指定
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // 牌靴
  SHOE = 1;
  // 例牌
  NORMAL = 2;

}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
enum Step {

  // 未指定
  STEP_UNSPECIFIED = 0;
  // 本局開始
  ROUND_START = 1;
  // 本局完成
  ROUND_FINISHED = 2;
  // 本局取消
  ROUND_CANCELED = 3;

  // 捨牌1
  DEAL_DISCARD_1 = 4;
  // 派發龍例牌
  DEAL_DRAGON_1 = 5;
  // 派發虎例牌
  DEAL_TIGER_1 = 6;

  // 開放下注
  OPEN_FOR_BETTING = 9;
  // 停止下注
  CLOSE_THE_BETTING = 10;

  // 開例牌
  SHOW_NORMAL = 12;

  // PITBOSS 修改派發例牌
  PITBOSS_MODIFY_NORMAL = 24;
}

// 座位功能代碼
enum Seat {

  // 未指定
  SEAT_UNSPECIFIED = 0;
  // 龍
  DRAGON = 1;
  // 虎
  TIGER = 2;
  // Dealer
  DEALER = 3;
  // Discard
  DISCARD = 4;
  // Pitboss
  PITBOSS = 9;

}

// 結果紀錄類型代碼
enum ResultRecordType {

  // 未指定
  RESULT_RECORD_TYPE_UNSPECIFIED = 0;
  // 遊戲局結束
  ROUND_FINISH = 1;
  // Pitboss 修正
  PITBOSS_MODIFY_RESULT = 2;

}

// 取消原因
enum CancelReason {

  // 未指定，沒有取消
  CANCEL_REASON_UNSPECIFIED = 0;
  // 取消說明原因
  NO_REASON = 1;

}

/**
 * The state of the game flow
 */
enum GameState {
  STATE_IDLE = 0;             // Idle
  STATE_START = 1;            // Game Starting
  STATE_COUNTER_START = 2;    // Counuter Started
  STATE_DRAGON = 3;           // Scan the dragon card
  STATE_TIGER = 4;            // Scan the tiger card
  STATE_END = 7;              // Game Ended
  STATE_CONFIRM = 8;          // Wait for confirm
  STATE_DISCARD = 9;          // Scane the discard

  STATE_SHUFFLE = 30;          // Shuffle cards
}

enum WinType {
  NULL    = 0;
  WIN_DRAGON  = 1;
  WIN_TIGER   = 2;
  WIN_TIE     = 3;
}

/**
* The status fo the current game.
*/
message GameStatus {
  string sessionID = 1;       // Unique tableid
  string gameRoundID = 2;     // Unique session for the game
  string tableID = 3;         // Unique tableid
  GameState state = 4;        // State of the game
  int64 startTime = 5;        // Time when game start
  string shoeID = 6;          // Shoe ID
  int32 shoe =7;
  int32 round =8;
  // game specify information
  string dragonCard = 10;     // Card slot Dragon
  string tigerCard = 11;      // Card slot Tiger
  string dragonBarcode = 12;     //  Dragon Barcode
  string tigerBarcode = 13;      //  Tiger Barcode
  int32 dragonPoint = 20;     // Dragon Point
  int32 tigerPoint = 21;      // Tiger Point
  int32 countdown = 30;       // Coundown value
  WinType winType = 31;       // Wintype

  bool redcard = 90;          // If redcard scan

  repeated string maskedCardsSN = 103; // masked cards sn slice for blockchan
  repeated string hashedCards = 104;  // sha256 cards from masked cards sn
  bool showFirstCard = 105;           // show first card boolean when new shoe
  string firstCard = 106;             // first card of the shoe
  int32 currentCardIndex = 107;       // next card to show (i.e. first maskedCardsSN haven't been shown's index)
  int32 redCardIndex = 108;           // the red card index of the shoe
  string cosmosShoeID = 109;          // cosmos blockchain id for the shoe
  int32 hashedLength = 110;           // length of hashedCards
  map<string, int32> scannerType = 112;  // 0: barcode 1:image recognition
  map<string, int32> lucky = 150;     // Lucky Number and payout ratio
}